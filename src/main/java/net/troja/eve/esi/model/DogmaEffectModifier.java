/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * modifier object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class DogmaEffectModifier implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_DOMAIN = "domain";
    @SerializedName(SERIALIZED_NAME_DOMAIN)
    @javax.annotation.Nullable
    private String domain;

    public static final String SERIALIZED_NAME_EFFECT_ID = "effect_id";
    @SerializedName(SERIALIZED_NAME_EFFECT_ID)
    @javax.annotation.Nullable
    private Integer effectId;

    public static final String SERIALIZED_NAME_FUNC = "func";
    @SerializedName(SERIALIZED_NAME_FUNC)
    @javax.annotation.Nonnull
    private String func;

    public static final String SERIALIZED_NAME_MODIFIED_ATTRIBUTE_ID = "modified_attribute_id";
    @SerializedName(SERIALIZED_NAME_MODIFIED_ATTRIBUTE_ID)
    @javax.annotation.Nullable
    private Integer modifiedAttributeId;

    public static final String SERIALIZED_NAME_MODIFYING_ATTRIBUTE_ID = "modifying_attribute_id";
    @SerializedName(SERIALIZED_NAME_MODIFYING_ATTRIBUTE_ID)
    @javax.annotation.Nullable
    private Integer modifyingAttributeId;

    public static final String SERIALIZED_NAME_OPERATOR = "operator";
    @SerializedName(SERIALIZED_NAME_OPERATOR)
    @javax.annotation.Nullable
    private Integer operator;

    public DogmaEffectModifier() {
    }

    public DogmaEffectModifier domain(@javax.annotation.Nullable String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * domain string
     * 
     * @return domain
     */
    @javax.annotation.Nullable
    public String getDomain() {
        return domain;
    }

    public void setDomain(@javax.annotation.Nullable String domain) {
        this.domain = domain;
    }

    public DogmaEffectModifier effectId(@javax.annotation.Nullable Integer effectId) {
        this.effectId = effectId;
        return this;
    }

    /**
     * effect_id integer
     * 
     * @return effectId
     */
    @javax.annotation.Nullable
    public Integer getEffectId() {
        return effectId;
    }

    public void setEffectId(@javax.annotation.Nullable Integer effectId) {
        this.effectId = effectId;
    }

    public DogmaEffectModifier func(@javax.annotation.Nonnull String func) {
        this.func = func;
        return this;
    }

    /**
     * func string
     * 
     * @return func
     */
    @javax.annotation.Nonnull
    public String getFunc() {
        return func;
    }

    public void setFunc(@javax.annotation.Nonnull String func) {
        this.func = func;
    }

    public DogmaEffectModifier modifiedAttributeId(@javax.annotation.Nullable Integer modifiedAttributeId) {
        this.modifiedAttributeId = modifiedAttributeId;
        return this;
    }

    /**
     * modified_attribute_id integer
     * 
     * @return modifiedAttributeId
     */
    @javax.annotation.Nullable
    public Integer getModifiedAttributeId() {
        return modifiedAttributeId;
    }

    public void setModifiedAttributeId(@javax.annotation.Nullable Integer modifiedAttributeId) {
        this.modifiedAttributeId = modifiedAttributeId;
    }

    public DogmaEffectModifier modifyingAttributeId(@javax.annotation.Nullable Integer modifyingAttributeId) {
        this.modifyingAttributeId = modifyingAttributeId;
        return this;
    }

    /**
     * modifying_attribute_id integer
     * 
     * @return modifyingAttributeId
     */
    @javax.annotation.Nullable
    public Integer getModifyingAttributeId() {
        return modifyingAttributeId;
    }

    public void setModifyingAttributeId(@javax.annotation.Nullable Integer modifyingAttributeId) {
        this.modifyingAttributeId = modifyingAttributeId;
    }

    public DogmaEffectModifier operator(@javax.annotation.Nullable Integer operator) {
        this.operator = operator;
        return this;
    }

    /**
     * operator integer
     * 
     * @return operator
     */
    @javax.annotation.Nullable
    public Integer getOperator() {
        return operator;
    }

    public void setOperator(@javax.annotation.Nullable Integer operator) {
        this.operator = operator;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DogmaEffectModifier dogmaEffectModifier = (DogmaEffectModifier) o;
        return Objects.equals(this.domain, dogmaEffectModifier.domain)
                && Objects.equals(this.effectId, dogmaEffectModifier.effectId)
                && Objects.equals(this.func, dogmaEffectModifier.func)
                && Objects.equals(this.modifiedAttributeId, dogmaEffectModifier.modifiedAttributeId)
                && Objects.equals(this.modifyingAttributeId, dogmaEffectModifier.modifyingAttributeId)
                && Objects.equals(this.operator, dogmaEffectModifier.operator);
    }

    @Override
    public int hashCode() {
        return Objects.hash(domain, effectId, func, modifiedAttributeId, modifyingAttributeId, operator);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DogmaEffectModifier {\n");
        sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
        sb.append("    effectId: ").append(toIndentedString(effectId)).append("\n");
        sb.append("    func: ").append(toIndentedString(func)).append("\n");
        sb.append("    modifiedAttributeId: ").append(toIndentedString(modifiedAttributeId)).append("\n");
        sb.append("    modifyingAttributeId: ").append(toIndentedString(modifyingAttributeId)).append("\n");
        sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("domain");
        openapiFields.add("effect_id");
        openapiFields.add("func");
        openapiFields.add("modified_attribute_id");
        openapiFields.add("modifying_attribute_id");
        openapiFields.add("operator");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("func");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to
     *             DogmaEffectModifier
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!DogmaEffectModifier.openapiRequiredFields.isEmpty()) { // has
                                                                        // required
                                                                        // fields
                                                                        // but
                                                                        // JSON
                                                                        // element
                                                                        // is
                                                                        // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in DogmaEffectModifier is not found in the empty JSON string",
                        DogmaEffectModifier.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!DogmaEffectModifier.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `DogmaEffectModifier` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : DogmaEffectModifier.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull())
                && !jsonObj.get("domain").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `domain` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("domain").toString()));
        }
        if (!jsonObj.get("func").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `func` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("func").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DogmaEffectModifier.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DogmaEffectModifier'
                             // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DogmaEffectModifier> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(DogmaEffectModifier.class));

            return (TypeAdapter<T>) new TypeAdapter<DogmaEffectModifier>() {
                @Override
                public void write(JsonWriter out, DogmaEffectModifier value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public DogmaEffectModifier read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of DogmaEffectModifier given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of DogmaEffectModifier
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             DogmaEffectModifier
     */
    public static DogmaEffectModifier fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DogmaEffectModifier.class);
    }

    /**
     * Convert an instance of DogmaEffectModifier to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
