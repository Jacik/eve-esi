/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class UniverseAncestriesResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_BLOODLINE_ID = "bloodline_id";
    @SerializedName(SERIALIZED_NAME_BLOODLINE_ID)
    @javax.annotation.Nonnull
    private Integer bloodlineId;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    @javax.annotation.Nonnull
    private String description;

    public static final String SERIALIZED_NAME_ICON_ID = "icon_id";
    @SerializedName(SERIALIZED_NAME_ICON_ID)
    @javax.annotation.Nullable
    private Integer iconId;

    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    @javax.annotation.Nonnull
    private Integer id;

    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    @javax.annotation.Nonnull
    private String name;

    public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "short_description";
    @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
    @javax.annotation.Nullable
    private String shortDescription;

    public UniverseAncestriesResponse() {
    }

    public UniverseAncestriesResponse bloodlineId(@javax.annotation.Nonnull Integer bloodlineId) {
        this.bloodlineId = bloodlineId;
        return this;
    }

    /**
     * The bloodline associated with this ancestry
     * 
     * @return bloodlineId
     */
    @javax.annotation.Nonnull
    public Integer getBloodlineId() {
        return bloodlineId;
    }

    public void setBloodlineId(@javax.annotation.Nonnull Integer bloodlineId) {
        this.bloodlineId = bloodlineId;
    }

    public UniverseAncestriesResponse description(@javax.annotation.Nonnull String description) {
        this.description = description;
        return this;
    }

    /**
     * description string
     * 
     * @return description
     */
    @javax.annotation.Nonnull
    public String getDescription() {
        return description;
    }

    public void setDescription(@javax.annotation.Nonnull String description) {
        this.description = description;
    }

    public UniverseAncestriesResponse iconId(@javax.annotation.Nullable Integer iconId) {
        this.iconId = iconId;
        return this;
    }

    /**
     * icon_id integer
     * 
     * @return iconId
     */
    @javax.annotation.Nullable
    public Integer getIconId() {
        return iconId;
    }

    public void setIconId(@javax.annotation.Nullable Integer iconId) {
        this.iconId = iconId;
    }

    public UniverseAncestriesResponse id(@javax.annotation.Nonnull Integer id) {
        this.id = id;
        return this;
    }

    /**
     * id integer
     * 
     * @return id
     */
    @javax.annotation.Nonnull
    public Integer getId() {
        return id;
    }

    public void setId(@javax.annotation.Nonnull Integer id) {
        this.id = id;
    }

    public UniverseAncestriesResponse name(@javax.annotation.Nonnull String name) {
        this.name = name;
        return this;
    }

    /**
     * name string
     * 
     * @return name
     */
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(@javax.annotation.Nonnull String name) {
        this.name = name;
    }

    public UniverseAncestriesResponse shortDescription(@javax.annotation.Nullable String shortDescription) {
        this.shortDescription = shortDescription;
        return this;
    }

    /**
     * short_description string
     * 
     * @return shortDescription
     */
    @javax.annotation.Nullable
    public String getShortDescription() {
        return shortDescription;
    }

    public void setShortDescription(@javax.annotation.Nullable String shortDescription) {
        this.shortDescription = shortDescription;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UniverseAncestriesResponse universeAncestriesResponse = (UniverseAncestriesResponse) o;
        return Objects.equals(this.bloodlineId, universeAncestriesResponse.bloodlineId)
                && Objects.equals(this.description, universeAncestriesResponse.description)
                && Objects.equals(this.iconId, universeAncestriesResponse.iconId)
                && Objects.equals(this.id, universeAncestriesResponse.id)
                && Objects.equals(this.name, universeAncestriesResponse.name)
                && Objects.equals(this.shortDescription, universeAncestriesResponse.shortDescription);
    }

    @Override
    public int hashCode() {
        return Objects.hash(bloodlineId, description, iconId, id, name, shortDescription);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UniverseAncestriesResponse {\n");
        sb.append("    bloodlineId: ").append(toIndentedString(bloodlineId)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    iconId: ").append(toIndentedString(iconId)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("bloodline_id");
        openapiFields.add("description");
        openapiFields.add("icon_id");
        openapiFields.add("id");
        openapiFields.add("name");
        openapiFields.add("short_description");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("bloodline_id");
        openapiRequiredFields.add("description");
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("name");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to
     *             UniverseAncestriesResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!UniverseAncestriesResponse.openapiRequiredFields.isEmpty()) { // has
                                                                               // required
                                                                               // fields
                                                                               // but
                                                                               // JSON
                                                                               // element
                                                                               // is
                                                                               // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in UniverseAncestriesResponse is not found in the empty JSON string",
                        UniverseAncestriesResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!UniverseAncestriesResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `UniverseAncestriesResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : UniverseAncestriesResponse.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("description").toString()));
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `name` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("name").toString()));
        }
        if ((jsonObj.get("short_description") != null && !jsonObj.get("short_description").isJsonNull())
                && !jsonObj.get("short_description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `short_description` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("short_description").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UniverseAncestriesResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'UniverseAncestriesResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UniverseAncestriesResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(UniverseAncestriesResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<UniverseAncestriesResponse>() {
                @Override
                public void write(JsonWriter out, UniverseAncestriesResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public UniverseAncestriesResponse read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of UniverseAncestriesResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of UniverseAncestriesResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             UniverseAncestriesResponse
     */
    public static UniverseAncestriesResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UniverseAncestriesResponse.class);
    }

    /**
     * Convert an instance of UniverseAncestriesResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
