/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * Full details of a specific event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class CharacterCalendarEventResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_DATE = "date";
    @SerializedName(SERIALIZED_NAME_DATE)
    @javax.annotation.Nonnull
    private OffsetDateTime date;

    public static final String SERIALIZED_NAME_DURATION = "duration";
    @SerializedName(SERIALIZED_NAME_DURATION)
    @javax.annotation.Nonnull
    private Integer duration;

    public static final String SERIALIZED_NAME_EVENT_ID = "event_id";
    @SerializedName(SERIALIZED_NAME_EVENT_ID)
    @javax.annotation.Nonnull
    private Integer eventId;

    public static final String SERIALIZED_NAME_IMPORTANCE = "importance";
    @SerializedName(SERIALIZED_NAME_IMPORTANCE)
    @javax.annotation.Nonnull
    private Integer importance;

    public static final String SERIALIZED_NAME_OWNER_ID = "owner_id";
    @SerializedName(SERIALIZED_NAME_OWNER_ID)
    @javax.annotation.Nonnull
    private Integer ownerId;

    public static final String SERIALIZED_NAME_OWNER_NAME = "owner_name";
    @SerializedName(SERIALIZED_NAME_OWNER_NAME)
    @javax.annotation.Nonnull
    private String ownerName;

    /**
     * owner_type string
     */
    @JsonAdapter(OwnerTypeEnum.Adapter.class)
    public enum OwnerTypeEnum {
        EVE_SERVER("eve_server"),

        CORPORATION("corporation"),

        FACTION("faction"),

        CHARACTER("character"),

        ALLIANCE("alliance");

        private String value;

        OwnerTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static OwnerTypeEnum fromValue(String value) {
            for (OwnerTypeEnum b : OwnerTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<OwnerTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final OwnerTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public OwnerTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return OwnerTypeEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            OwnerTypeEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_OWNER_TYPE = "owner_type";
    @SerializedName(SERIALIZED_NAME_OWNER_TYPE)
    @javax.annotation.Nonnull
    private String ownerType;
    private OwnerTypeEnum ownerTypeEnum;

    public static final String SERIALIZED_NAME_RESPONSE = "response";
    @SerializedName(SERIALIZED_NAME_RESPONSE)
    @javax.annotation.Nonnull
    private String response;

    public static final String SERIALIZED_NAME_TEXT = "text";
    @SerializedName(SERIALIZED_NAME_TEXT)
    @javax.annotation.Nonnull
    private String text;

    public static final String SERIALIZED_NAME_TITLE = "title";
    @SerializedName(SERIALIZED_NAME_TITLE)
    @javax.annotation.Nonnull
    private String title;

    public CharacterCalendarEventResponse() {
    }

    public CharacterCalendarEventResponse date(@javax.annotation.Nonnull OffsetDateTime date) {
        this.date = date;
        return this;
    }

    /**
     * date string
     * 
     * @return date
     */
    @javax.annotation.Nonnull
    public OffsetDateTime getDate() {
        return date;
    }

    public void setDate(@javax.annotation.Nonnull OffsetDateTime date) {
        this.date = date;
    }

    public CharacterCalendarEventResponse duration(@javax.annotation.Nonnull Integer duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Length in minutes
     * 
     * @return duration
     */
    @javax.annotation.Nonnull
    public Integer getDuration() {
        return duration;
    }

    public void setDuration(@javax.annotation.Nonnull Integer duration) {
        this.duration = duration;
    }

    public CharacterCalendarEventResponse eventId(@javax.annotation.Nonnull Integer eventId) {
        this.eventId = eventId;
        return this;
    }

    /**
     * event_id integer
     * 
     * @return eventId
     */
    @javax.annotation.Nonnull
    public Integer getEventId() {
        return eventId;
    }

    public void setEventId(@javax.annotation.Nonnull Integer eventId) {
        this.eventId = eventId;
    }

    public CharacterCalendarEventResponse importance(@javax.annotation.Nonnull Integer importance) {
        this.importance = importance;
        return this;
    }

    /**
     * importance integer
     * 
     * @return importance
     */
    @javax.annotation.Nonnull
    public Integer getImportance() {
        return importance;
    }

    public void setImportance(@javax.annotation.Nonnull Integer importance) {
        this.importance = importance;
    }

    public CharacterCalendarEventResponse ownerId(@javax.annotation.Nonnull Integer ownerId) {
        this.ownerId = ownerId;
        return this;
    }

    /**
     * owner_id integer
     * 
     * @return ownerId
     */
    @javax.annotation.Nonnull
    public Integer getOwnerId() {
        return ownerId;
    }

    public void setOwnerId(@javax.annotation.Nonnull Integer ownerId) {
        this.ownerId = ownerId;
    }

    public CharacterCalendarEventResponse ownerName(@javax.annotation.Nonnull String ownerName) {
        this.ownerName = ownerName;
        return this;
    }

    /**
     * owner_name string
     * 
     * @return ownerName
     */
    @javax.annotation.Nonnull
    public String getOwnerName() {
        return ownerName;
    }

    public void setOwnerName(@javax.annotation.Nonnull String ownerName) {
        this.ownerName = ownerName;
    }

    public CharacterCalendarEventResponse ownerType(@javax.annotation.Nonnull OwnerTypeEnum ownerType) {
        this.ownerTypeEnum = ownerType;
        return this;
    }

    public CharacterCalendarEventResponse ownerTypeString(@javax.annotation.Nonnull String ownerType) {
        this.ownerType = ownerType;
        return this;
    }

    /**
     * owner_type string
     * 
     * @return ownerType
     */

    public OwnerTypeEnum getOwnerType() {
        if (ownerTypeEnum == null) {
            ownerTypeEnum = OwnerTypeEnum.fromValue(ownerType);
        }
        return ownerTypeEnum;
    }

    public String getOwnerTypeString() {
        return ownerType;
    }

    public void setOwnerType(@javax.annotation.Nonnull OwnerTypeEnum ownerType) {
        this.ownerTypeEnum = ownerType;
    }

    public void setOwnerTypeString(@javax.annotation.Nonnull String ownerType) {
        this.ownerType = ownerType;
    }

    public CharacterCalendarEventResponse response(@javax.annotation.Nonnull String response) {
        this.response = response;
        return this;
    }

    /**
     * response string
     * 
     * @return response
     */
    @javax.annotation.Nonnull
    public String getResponse() {
        return response;
    }

    public void setResponse(@javax.annotation.Nonnull String response) {
        this.response = response;
    }

    public CharacterCalendarEventResponse text(@javax.annotation.Nonnull String text) {
        this.text = text;
        return this;
    }

    /**
     * text string
     * 
     * @return text
     */
    @javax.annotation.Nonnull
    public String getText() {
        return text;
    }

    public void setText(@javax.annotation.Nonnull String text) {
        this.text = text;
    }

    public CharacterCalendarEventResponse title(@javax.annotation.Nonnull String title) {
        this.title = title;
        return this;
    }

    /**
     * title string
     * 
     * @return title
     */
    @javax.annotation.Nonnull
    public String getTitle() {
        return title;
    }

    public void setTitle(@javax.annotation.Nonnull String title) {
        this.title = title;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CharacterCalendarEventResponse characterCalendarEventResponse = (CharacterCalendarEventResponse) o;
        return Objects.equals(this.date, characterCalendarEventResponse.date)
                && Objects.equals(this.duration, characterCalendarEventResponse.duration)
                && Objects.equals(this.eventId, characterCalendarEventResponse.eventId)
                && Objects.equals(this.importance, characterCalendarEventResponse.importance)
                && Objects.equals(this.ownerId, characterCalendarEventResponse.ownerId)
                && Objects.equals(this.ownerName, characterCalendarEventResponse.ownerName)
                && Objects.equals(this.ownerType, characterCalendarEventResponse.ownerType)
                && Objects.equals(this.response, characterCalendarEventResponse.response)
                && Objects.equals(this.text, characterCalendarEventResponse.text)
                && Objects.equals(this.title, characterCalendarEventResponse.title);
    }

    @Override
    public int hashCode() {
        return Objects.hash(date, duration, eventId, importance, ownerId, ownerName, ownerType, response, text, title);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CharacterCalendarEventResponse {\n");
        sb.append("    date: ").append(toIndentedString(date)).append("\n");
        sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
        sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
        sb.append("    importance: ").append(toIndentedString(importance)).append("\n");
        sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
        sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
        sb.append("    ownerType: ").append(toIndentedString(ownerType)).append("\n");
        sb.append("    response: ").append(toIndentedString(response)).append("\n");
        sb.append("    text: ").append(toIndentedString(text)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("date");
        openapiFields.add("duration");
        openapiFields.add("event_id");
        openapiFields.add("importance");
        openapiFields.add("owner_id");
        openapiFields.add("owner_name");
        openapiFields.add("owner_type");
        openapiFields.add("response");
        openapiFields.add("text");
        openapiFields.add("title");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("date");
        openapiRequiredFields.add("duration");
        openapiRequiredFields.add("event_id");
        openapiRequiredFields.add("importance");
        openapiRequiredFields.add("owner_id");
        openapiRequiredFields.add("owner_name");
        openapiRequiredFields.add("owner_type");
        openapiRequiredFields.add("response");
        openapiRequiredFields.add("text");
        openapiRequiredFields.add("title");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to
     *             CharacterCalendarEventResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CharacterCalendarEventResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                   // required
                                                                                   // fields
                                                                                   // but
                                                                                   // JSON
                                                                                   // element
                                                                                   // is
                                                                                   // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CharacterCalendarEventResponse is not found in the empty JSON string",
                                CharacterCalendarEventResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CharacterCalendarEventResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CharacterCalendarEventResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CharacterCalendarEventResponse.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("owner_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `owner_name` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("owner_name").toString()));
        }
        if (!jsonObj.get("owner_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `owner_type` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("owner_type").toString()));
        }
        // validate the required field `owner_type`
        OwnerTypeEnum.validateJsonElement(jsonObj.get("owner_type"));
        if (!jsonObj.get("response").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `response` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("response").toString()));
        }
        if (!jsonObj.get("text").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `text` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("text").toString()));
        }
        if (!jsonObj.get("title").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `title` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("title").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CharacterCalendarEventResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CharacterCalendarEventResponse' and its
                             // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CharacterCalendarEventResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CharacterCalendarEventResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CharacterCalendarEventResponse>() {
                @Override
                public void write(JsonWriter out, CharacterCalendarEventResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CharacterCalendarEventResponse read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CharacterCalendarEventResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CharacterCalendarEventResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CharacterCalendarEventResponse
     */
    public static CharacterCalendarEventResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CharacterCalendarEventResponse.class);
    }

    /**
     * Convert an instance of CharacterCalendarEventResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
