/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class CorporationRolesResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_CHARACTER_ID = "character_id";
    @SerializedName(SERIALIZED_NAME_CHARACTER_ID)
    @javax.annotation.Nonnull
    private Integer characterId;

    /**
     * grantable_role string
     */
    @JsonAdapter(GrantableRolesEnum.Adapter.class)
    public enum GrantableRolesEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        BRAND_MANAGER("Brand_Manager"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DELIVERIES_CONTAINER_TAKE("Deliveries_Container_Take"),

        DELIVERIES_QUERY("Deliveries_Query"),

        DELIVERIES_TAKE("Deliveries_Take"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        PROJECT_MANAGER("Project_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        GrantableRolesEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static GrantableRolesEnum fromValue(String value) {
            for (GrantableRolesEnum b : GrantableRolesEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<GrantableRolesEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final GrantableRolesEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public GrantableRolesEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return GrantableRolesEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            GrantableRolesEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_GRANTABLE_ROLES = "grantable_roles";
    @SerializedName(SERIALIZED_NAME_GRANTABLE_ROLES)
    @javax.annotation.Nullable
    private List<String> grantableRoles = new ArrayList<>();
    private List<GrantableRolesEnum> grantableRolesEnum = new ArrayList<>();

    /**
     * grantable_roles_at_base string
     */
    @JsonAdapter(GrantableRolesAtBaseEnum.Adapter.class)
    public enum GrantableRolesAtBaseEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        BRAND_MANAGER("Brand_Manager"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DELIVERIES_CONTAINER_TAKE("Deliveries_Container_Take"),

        DELIVERIES_QUERY("Deliveries_Query"),

        DELIVERIES_TAKE("Deliveries_Take"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        PROJECT_MANAGER("Project_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        GrantableRolesAtBaseEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static GrantableRolesAtBaseEnum fromValue(String value) {
            for (GrantableRolesAtBaseEnum b : GrantableRolesAtBaseEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<GrantableRolesAtBaseEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final GrantableRolesAtBaseEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public GrantableRolesAtBaseEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return GrantableRolesAtBaseEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            GrantableRolesAtBaseEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_GRANTABLE_ROLES_AT_BASE = "grantable_roles_at_base";
    @SerializedName(SERIALIZED_NAME_GRANTABLE_ROLES_AT_BASE)
    @javax.annotation.Nullable
    private List<String> grantableRolesAtBase = new ArrayList<>();
    private List<GrantableRolesAtBaseEnum> grantableRolesAtBaseEnum = new ArrayList<>();

    /**
     * grantable_roles_at_hq string
     */
    @JsonAdapter(GrantableRolesAtHqEnum.Adapter.class)
    public enum GrantableRolesAtHqEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        BRAND_MANAGER("Brand_Manager"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DELIVERIES_CONTAINER_TAKE("Deliveries_Container_Take"),

        DELIVERIES_QUERY("Deliveries_Query"),

        DELIVERIES_TAKE("Deliveries_Take"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        PROJECT_MANAGER("Project_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        GrantableRolesAtHqEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static GrantableRolesAtHqEnum fromValue(String value) {
            for (GrantableRolesAtHqEnum b : GrantableRolesAtHqEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<GrantableRolesAtHqEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final GrantableRolesAtHqEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public GrantableRolesAtHqEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return GrantableRolesAtHqEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            GrantableRolesAtHqEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_GRANTABLE_ROLES_AT_HQ = "grantable_roles_at_hq";
    @SerializedName(SERIALIZED_NAME_GRANTABLE_ROLES_AT_HQ)
    @javax.annotation.Nullable
    private List<String> grantableRolesAtHq = new ArrayList<>();
    private List<GrantableRolesAtHqEnum> grantableRolesAtHqEnum = new ArrayList<>();

    /**
     * grantable_roles_at_other string
     */
    @JsonAdapter(GrantableRolesAtOtherEnum.Adapter.class)
    public enum GrantableRolesAtOtherEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        BRAND_MANAGER("Brand_Manager"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DELIVERIES_CONTAINER_TAKE("Deliveries_Container_Take"),

        DELIVERIES_QUERY("Deliveries_Query"),

        DELIVERIES_TAKE("Deliveries_Take"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        PROJECT_MANAGER("Project_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        GrantableRolesAtOtherEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static GrantableRolesAtOtherEnum fromValue(String value) {
            for (GrantableRolesAtOtherEnum b : GrantableRolesAtOtherEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<GrantableRolesAtOtherEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final GrantableRolesAtOtherEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public GrantableRolesAtOtherEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return GrantableRolesAtOtherEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            GrantableRolesAtOtherEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_GRANTABLE_ROLES_AT_OTHER = "grantable_roles_at_other";
    @SerializedName(SERIALIZED_NAME_GRANTABLE_ROLES_AT_OTHER)
    @javax.annotation.Nullable
    private List<String> grantableRolesAtOther = new ArrayList<>();
    private List<GrantableRolesAtOtherEnum> grantableRolesAtOtherEnum = new ArrayList<>();

    /**
     * role string
     */
    @JsonAdapter(RolesEnum.Adapter.class)
    public enum RolesEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        BRAND_MANAGER("Brand_Manager"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DELIVERIES_CONTAINER_TAKE("Deliveries_Container_Take"),

        DELIVERIES_QUERY("Deliveries_Query"),

        DELIVERIES_TAKE("Deliveries_Take"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        PROJECT_MANAGER("Project_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        RolesEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RolesEnum fromValue(String value) {
            for (RolesEnum b : RolesEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<RolesEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RolesEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RolesEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RolesEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            RolesEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_ROLES = "roles";
    @SerializedName(SERIALIZED_NAME_ROLES)
    @javax.annotation.Nullable
    private List<String> roles = new ArrayList<>();
    private List<RolesEnum> rolesEnum = new ArrayList<>();

    /**
     * roles_at_base string
     */
    @JsonAdapter(RolesAtBaseEnum.Adapter.class)
    public enum RolesAtBaseEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        BRAND_MANAGER("Brand_Manager"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DELIVERIES_CONTAINER_TAKE("Deliveries_Container_Take"),

        DELIVERIES_QUERY("Deliveries_Query"),

        DELIVERIES_TAKE("Deliveries_Take"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        PROJECT_MANAGER("Project_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        RolesAtBaseEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RolesAtBaseEnum fromValue(String value) {
            for (RolesAtBaseEnum b : RolesAtBaseEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<RolesAtBaseEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RolesAtBaseEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RolesAtBaseEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RolesAtBaseEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            RolesAtBaseEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_ROLES_AT_BASE = "roles_at_base";
    @SerializedName(SERIALIZED_NAME_ROLES_AT_BASE)
    @javax.annotation.Nullable
    private List<String> rolesAtBase = new ArrayList<>();
    private List<RolesAtBaseEnum> rolesAtBaseEnum = new ArrayList<>();

    /**
     * roles_at_hq string
     */
    @JsonAdapter(RolesAtHqEnum.Adapter.class)
    public enum RolesAtHqEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        BRAND_MANAGER("Brand_Manager"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DELIVERIES_CONTAINER_TAKE("Deliveries_Container_Take"),

        DELIVERIES_QUERY("Deliveries_Query"),

        DELIVERIES_TAKE("Deliveries_Take"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        PROJECT_MANAGER("Project_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        RolesAtHqEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RolesAtHqEnum fromValue(String value) {
            for (RolesAtHqEnum b : RolesAtHqEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<RolesAtHqEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RolesAtHqEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RolesAtHqEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RolesAtHqEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            RolesAtHqEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_ROLES_AT_HQ = "roles_at_hq";
    @SerializedName(SERIALIZED_NAME_ROLES_AT_HQ)
    @javax.annotation.Nullable
    private List<String> rolesAtHq = new ArrayList<>();
    private List<RolesAtHqEnum> rolesAtHqEnum = new ArrayList<>();

    /**
     * roles_at_other string
     */
    @JsonAdapter(RolesAtOtherEnum.Adapter.class)
    public enum RolesAtOtherEnum {
        ACCOUNT_TAKE_1("Account_Take_1"),

        ACCOUNT_TAKE_2("Account_Take_2"),

        ACCOUNT_TAKE_3("Account_Take_3"),

        ACCOUNT_TAKE_4("Account_Take_4"),

        ACCOUNT_TAKE_5("Account_Take_5"),

        ACCOUNT_TAKE_6("Account_Take_6"),

        ACCOUNT_TAKE_7("Account_Take_7"),

        ACCOUNTANT("Accountant"),

        AUDITOR("Auditor"),

        BRAND_MANAGER("Brand_Manager"),

        COMMUNICATIONS_OFFICER("Communications_Officer"),

        CONFIG_EQUIPMENT("Config_Equipment"),

        CONFIG_STARBASE_EQUIPMENT("Config_Starbase_Equipment"),

        CONTAINER_TAKE_1("Container_Take_1"),

        CONTAINER_TAKE_2("Container_Take_2"),

        CONTAINER_TAKE_3("Container_Take_3"),

        CONTAINER_TAKE_4("Container_Take_4"),

        CONTAINER_TAKE_5("Container_Take_5"),

        CONTAINER_TAKE_6("Container_Take_6"),

        CONTAINER_TAKE_7("Container_Take_7"),

        CONTRACT_MANAGER("Contract_Manager"),

        DELIVERIES_CONTAINER_TAKE("Deliveries_Container_Take"),

        DELIVERIES_QUERY("Deliveries_Query"),

        DELIVERIES_TAKE("Deliveries_Take"),

        DIPLOMAT("Diplomat"),

        DIRECTOR("Director"),

        FACTORY_MANAGER("Factory_Manager"),

        FITTING_MANAGER("Fitting_Manager"),

        HANGAR_QUERY_1("Hangar_Query_1"),

        HANGAR_QUERY_2("Hangar_Query_2"),

        HANGAR_QUERY_3("Hangar_Query_3"),

        HANGAR_QUERY_4("Hangar_Query_4"),

        HANGAR_QUERY_5("Hangar_Query_5"),

        HANGAR_QUERY_6("Hangar_Query_6"),

        HANGAR_QUERY_7("Hangar_Query_7"),

        HANGAR_TAKE_1("Hangar_Take_1"),

        HANGAR_TAKE_2("Hangar_Take_2"),

        HANGAR_TAKE_3("Hangar_Take_3"),

        HANGAR_TAKE_4("Hangar_Take_4"),

        HANGAR_TAKE_5("Hangar_Take_5"),

        HANGAR_TAKE_6("Hangar_Take_6"),

        HANGAR_TAKE_7("Hangar_Take_7"),

        JUNIOR_ACCOUNTANT("Junior_Accountant"),

        PERSONNEL_MANAGER("Personnel_Manager"),

        PROJECT_MANAGER("Project_Manager"),

        RENT_FACTORY_FACILITY("Rent_Factory_Facility"),

        RENT_OFFICE("Rent_Office"),

        RENT_RESEARCH_FACILITY("Rent_Research_Facility"),

        SECURITY_OFFICER("Security_Officer"),

        SKILL_PLAN_MANAGER("Skill_Plan_Manager"),

        STARBASE_DEFENSE_OPERATOR("Starbase_Defense_Operator"),

        STARBASE_FUEL_TECHNICIAN("Starbase_Fuel_Technician"),

        STATION_MANAGER("Station_Manager"),

        TRADER("Trader");

        private String value;

        RolesAtOtherEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RolesAtOtherEnum fromValue(String value) {
            for (RolesAtOtherEnum b : RolesAtOtherEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<RolesAtOtherEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RolesAtOtherEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RolesAtOtherEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RolesAtOtherEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            RolesAtOtherEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_ROLES_AT_OTHER = "roles_at_other";
    @SerializedName(SERIALIZED_NAME_ROLES_AT_OTHER)
    @javax.annotation.Nullable
    private List<String> rolesAtOther = new ArrayList<>();
    private List<RolesAtOtherEnum> rolesAtOtherEnum = new ArrayList<>();

    public CorporationRolesResponse() {
    }

    public CorporationRolesResponse characterId(@javax.annotation.Nonnull Integer characterId) {
        this.characterId = characterId;
        return this;
    }

    /**
     * character_id integer
     * 
     * @return characterId
     */
    @javax.annotation.Nonnull
    public Integer getCharacterId() {
        return characterId;
    }

    public void setCharacterId(@javax.annotation.Nonnull Integer characterId) {
        this.characterId = characterId;
    }

    public CorporationRolesResponse grantableRoles(@javax.annotation.Nullable List<GrantableRolesEnum> grantableRoles) {
        this.grantableRolesEnum = grantableRoles;
        return this;
    }

    public CorporationRolesResponse grantableRolesString(@javax.annotation.Nullable List<String> grantableRoles) {
        this.grantableRoles = grantableRoles;
        return this;
    }

    public CorporationRolesResponse addGrantableRolesItem(GrantableRolesEnum grantableRolesItem) {
        if (this.grantableRoles == null) {
            this.grantableRoles = new ArrayList<>();
        }
        if (this.grantableRolesEnum == null) {
            this.grantableRolesEnum = new ArrayList<>();
        }
        this.grantableRoles.add(grantableRolesItem.toString());
        this.grantableRolesEnum.add(grantableRolesItem);
        return this;
    }

    /**
     * grantable_roles array
     * 
     * @return grantableRoles
     */

    public List<GrantableRolesEnum> getGrantableRoles() {
        if (grantableRolesEnum == null) {
            grantableRolesEnum = new ArrayList<>();
            for (String value : grantableRoles) {
                grantableRolesEnum.add(GrantableRolesEnum.fromValue(value));
            }
        }
        return grantableRolesEnum;
    }

    public List<String> getGrantableRolesString() {
        return grantableRoles;
    }

    public void setGrantableRoles(@javax.annotation.Nullable List<GrantableRolesEnum> grantableRoles) {
        this.grantableRolesEnum = grantableRoles;
    }

    public void setGrantableRolesString(@javax.annotation.Nullable List<String> grantableRoles) {
        this.grantableRoles = grantableRoles;
    }

    public CorporationRolesResponse grantableRolesAtBase(
            @javax.annotation.Nullable List<GrantableRolesAtBaseEnum> grantableRolesAtBase) {
        this.grantableRolesAtBaseEnum = grantableRolesAtBase;
        return this;
    }

    public CorporationRolesResponse grantableRolesAtBaseString(
            @javax.annotation.Nullable List<String> grantableRolesAtBase) {
        this.grantableRolesAtBase = grantableRolesAtBase;
        return this;
    }

    public CorporationRolesResponse addGrantableRolesAtBaseItem(GrantableRolesAtBaseEnum grantableRolesAtBaseItem) {
        if (this.grantableRolesAtBase == null) {
            this.grantableRolesAtBase = new ArrayList<>();
        }
        if (this.grantableRolesAtBaseEnum == null) {
            this.grantableRolesAtBaseEnum = new ArrayList<>();
        }
        this.grantableRolesAtBase.add(grantableRolesAtBaseItem.toString());
        this.grantableRolesAtBaseEnum.add(grantableRolesAtBaseItem);
        return this;
    }

    /**
     * grantable_roles_at_base array
     * 
     * @return grantableRolesAtBase
     */

    public List<GrantableRolesAtBaseEnum> getGrantableRolesAtBase() {
        if (grantableRolesAtBaseEnum == null) {
            grantableRolesAtBaseEnum = new ArrayList<>();
            for (String value : grantableRolesAtBase) {
                grantableRolesAtBaseEnum.add(GrantableRolesAtBaseEnum.fromValue(value));
            }
        }
        return grantableRolesAtBaseEnum;
    }

    public List<String> getGrantableRolesAtBaseString() {
        return grantableRolesAtBase;
    }

    public void setGrantableRolesAtBase(@javax.annotation.Nullable List<GrantableRolesAtBaseEnum> grantableRolesAtBase) {
        this.grantableRolesAtBaseEnum = grantableRolesAtBase;
    }

    public void setGrantableRolesAtBaseString(@javax.annotation.Nullable List<String> grantableRolesAtBase) {
        this.grantableRolesAtBase = grantableRolesAtBase;
    }

    public CorporationRolesResponse grantableRolesAtHq(
            @javax.annotation.Nullable List<GrantableRolesAtHqEnum> grantableRolesAtHq) {
        this.grantableRolesAtHqEnum = grantableRolesAtHq;
        return this;
    }

    public CorporationRolesResponse grantableRolesAtHqString(@javax.annotation.Nullable List<String> grantableRolesAtHq) {
        this.grantableRolesAtHq = grantableRolesAtHq;
        return this;
    }

    public CorporationRolesResponse addGrantableRolesAtHqItem(GrantableRolesAtHqEnum grantableRolesAtHqItem) {
        if (this.grantableRolesAtHq == null) {
            this.grantableRolesAtHq = new ArrayList<>();
        }
        if (this.grantableRolesAtHqEnum == null) {
            this.grantableRolesAtHqEnum = new ArrayList<>();
        }
        this.grantableRolesAtHq.add(grantableRolesAtHqItem.toString());
        this.grantableRolesAtHqEnum.add(grantableRolesAtHqItem);
        return this;
    }

    /**
     * grantable_roles_at_hq array
     * 
     * @return grantableRolesAtHq
     */

    public List<GrantableRolesAtHqEnum> getGrantableRolesAtHq() {
        if (grantableRolesAtHqEnum == null) {
            grantableRolesAtHqEnum = new ArrayList<>();
            for (String value : grantableRolesAtHq) {
                grantableRolesAtHqEnum.add(GrantableRolesAtHqEnum.fromValue(value));
            }
        }
        return grantableRolesAtHqEnum;
    }

    public List<String> getGrantableRolesAtHqString() {
        return grantableRolesAtHq;
    }

    public void setGrantableRolesAtHq(@javax.annotation.Nullable List<GrantableRolesAtHqEnum> grantableRolesAtHq) {
        this.grantableRolesAtHqEnum = grantableRolesAtHq;
    }

    public void setGrantableRolesAtHqString(@javax.annotation.Nullable List<String> grantableRolesAtHq) {
        this.grantableRolesAtHq = grantableRolesAtHq;
    }

    public CorporationRolesResponse grantableRolesAtOther(
            @javax.annotation.Nullable List<GrantableRolesAtOtherEnum> grantableRolesAtOther) {
        this.grantableRolesAtOtherEnum = grantableRolesAtOther;
        return this;
    }

    public CorporationRolesResponse grantableRolesAtOtherString(
            @javax.annotation.Nullable List<String> grantableRolesAtOther) {
        this.grantableRolesAtOther = grantableRolesAtOther;
        return this;
    }

    public CorporationRolesResponse addGrantableRolesAtOtherItem(GrantableRolesAtOtherEnum grantableRolesAtOtherItem) {
        if (this.grantableRolesAtOther == null) {
            this.grantableRolesAtOther = new ArrayList<>();
        }
        if (this.grantableRolesAtOtherEnum == null) {
            this.grantableRolesAtOtherEnum = new ArrayList<>();
        }
        this.grantableRolesAtOther.add(grantableRolesAtOtherItem.toString());
        this.grantableRolesAtOtherEnum.add(grantableRolesAtOtherItem);
        return this;
    }

    /**
     * grantable_roles_at_other array
     * 
     * @return grantableRolesAtOther
     */

    public List<GrantableRolesAtOtherEnum> getGrantableRolesAtOther() {
        if (grantableRolesAtOtherEnum == null) {
            grantableRolesAtOtherEnum = new ArrayList<>();
            for (String value : grantableRolesAtOther) {
                grantableRolesAtOtherEnum.add(GrantableRolesAtOtherEnum.fromValue(value));
            }
        }
        return grantableRolesAtOtherEnum;
    }

    public List<String> getGrantableRolesAtOtherString() {
        return grantableRolesAtOther;
    }

    public void setGrantableRolesAtOther(
            @javax.annotation.Nullable List<GrantableRolesAtOtherEnum> grantableRolesAtOther) {
        this.grantableRolesAtOtherEnum = grantableRolesAtOther;
    }

    public void setGrantableRolesAtOtherString(@javax.annotation.Nullable List<String> grantableRolesAtOther) {
        this.grantableRolesAtOther = grantableRolesAtOther;
    }

    public CorporationRolesResponse roles(@javax.annotation.Nullable List<RolesEnum> roles) {
        this.rolesEnum = roles;
        return this;
    }

    public CorporationRolesResponse rolesString(@javax.annotation.Nullable List<String> roles) {
        this.roles = roles;
        return this;
    }

    public CorporationRolesResponse addRolesItem(RolesEnum rolesItem) {
        if (this.roles == null) {
            this.roles = new ArrayList<>();
        }
        if (this.rolesEnum == null) {
            this.rolesEnum = new ArrayList<>();
        }
        this.roles.add(rolesItem.toString());
        this.rolesEnum.add(rolesItem);
        return this;
    }

    /**
     * roles array
     * 
     * @return roles
     */

    public List<RolesEnum> getRoles() {
        if (rolesEnum == null) {
            rolesEnum = new ArrayList<>();
            for (String value : roles) {
                rolesEnum.add(RolesEnum.fromValue(value));
            }
        }
        return rolesEnum;
    }

    public List<String> getRolesString() {
        return roles;
    }

    public void setRoles(@javax.annotation.Nullable List<RolesEnum> roles) {
        this.rolesEnum = roles;
    }

    public void setRolesString(@javax.annotation.Nullable List<String> roles) {
        this.roles = roles;
    }

    public CorporationRolesResponse rolesAtBase(@javax.annotation.Nullable List<RolesAtBaseEnum> rolesAtBase) {
        this.rolesAtBaseEnum = rolesAtBase;
        return this;
    }

    public CorporationRolesResponse rolesAtBaseString(@javax.annotation.Nullable List<String> rolesAtBase) {
        this.rolesAtBase = rolesAtBase;
        return this;
    }

    public CorporationRolesResponse addRolesAtBaseItem(RolesAtBaseEnum rolesAtBaseItem) {
        if (this.rolesAtBase == null) {
            this.rolesAtBase = new ArrayList<>();
        }
        if (this.rolesAtBaseEnum == null) {
            this.rolesAtBaseEnum = new ArrayList<>();
        }
        this.rolesAtBase.add(rolesAtBaseItem.toString());
        this.rolesAtBaseEnum.add(rolesAtBaseItem);
        return this;
    }

    /**
     * roles_at_base array
     * 
     * @return rolesAtBase
     */

    public List<RolesAtBaseEnum> getRolesAtBase() {
        if (rolesAtBaseEnum == null) {
            rolesAtBaseEnum = new ArrayList<>();
            for (String value : rolesAtBase) {
                rolesAtBaseEnum.add(RolesAtBaseEnum.fromValue(value));
            }
        }
        return rolesAtBaseEnum;
    }

    public List<String> getRolesAtBaseString() {
        return rolesAtBase;
    }

    public void setRolesAtBase(@javax.annotation.Nullable List<RolesAtBaseEnum> rolesAtBase) {
        this.rolesAtBaseEnum = rolesAtBase;
    }

    public void setRolesAtBaseString(@javax.annotation.Nullable List<String> rolesAtBase) {
        this.rolesAtBase = rolesAtBase;
    }

    public CorporationRolesResponse rolesAtHq(@javax.annotation.Nullable List<RolesAtHqEnum> rolesAtHq) {
        this.rolesAtHqEnum = rolesAtHq;
        return this;
    }

    public CorporationRolesResponse rolesAtHqString(@javax.annotation.Nullable List<String> rolesAtHq) {
        this.rolesAtHq = rolesAtHq;
        return this;
    }

    public CorporationRolesResponse addRolesAtHqItem(RolesAtHqEnum rolesAtHqItem) {
        if (this.rolesAtHq == null) {
            this.rolesAtHq = new ArrayList<>();
        }
        if (this.rolesAtHqEnum == null) {
            this.rolesAtHqEnum = new ArrayList<>();
        }
        this.rolesAtHq.add(rolesAtHqItem.toString());
        this.rolesAtHqEnum.add(rolesAtHqItem);
        return this;
    }

    /**
     * roles_at_hq array
     * 
     * @return rolesAtHq
     */

    public List<RolesAtHqEnum> getRolesAtHq() {
        if (rolesAtHqEnum == null) {
            rolesAtHqEnum = new ArrayList<>();
            for (String value : rolesAtHq) {
                rolesAtHqEnum.add(RolesAtHqEnum.fromValue(value));
            }
        }
        return rolesAtHqEnum;
    }

    public List<String> getRolesAtHqString() {
        return rolesAtHq;
    }

    public void setRolesAtHq(@javax.annotation.Nullable List<RolesAtHqEnum> rolesAtHq) {
        this.rolesAtHqEnum = rolesAtHq;
    }

    public void setRolesAtHqString(@javax.annotation.Nullable List<String> rolesAtHq) {
        this.rolesAtHq = rolesAtHq;
    }

    public CorporationRolesResponse rolesAtOther(@javax.annotation.Nullable List<RolesAtOtherEnum> rolesAtOther) {
        this.rolesAtOtherEnum = rolesAtOther;
        return this;
    }

    public CorporationRolesResponse rolesAtOtherString(@javax.annotation.Nullable List<String> rolesAtOther) {
        this.rolesAtOther = rolesAtOther;
        return this;
    }

    public CorporationRolesResponse addRolesAtOtherItem(RolesAtOtherEnum rolesAtOtherItem) {
        if (this.rolesAtOther == null) {
            this.rolesAtOther = new ArrayList<>();
        }
        if (this.rolesAtOtherEnum == null) {
            this.rolesAtOtherEnum = new ArrayList<>();
        }
        this.rolesAtOther.add(rolesAtOtherItem.toString());
        this.rolesAtOtherEnum.add(rolesAtOtherItem);
        return this;
    }

    /**
     * roles_at_other array
     * 
     * @return rolesAtOther
     */

    public List<RolesAtOtherEnum> getRolesAtOther() {
        if (rolesAtOtherEnum == null) {
            rolesAtOtherEnum = new ArrayList<>();
            for (String value : rolesAtOther) {
                rolesAtOtherEnum.add(RolesAtOtherEnum.fromValue(value));
            }
        }
        return rolesAtOtherEnum;
    }

    public List<String> getRolesAtOtherString() {
        return rolesAtOther;
    }

    public void setRolesAtOther(@javax.annotation.Nullable List<RolesAtOtherEnum> rolesAtOther) {
        this.rolesAtOtherEnum = rolesAtOther;
    }

    public void setRolesAtOtherString(@javax.annotation.Nullable List<String> rolesAtOther) {
        this.rolesAtOther = rolesAtOther;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CorporationRolesResponse corporationRolesResponse = (CorporationRolesResponse) o;
        return Objects.equals(this.characterId, corporationRolesResponse.characterId)
                && Objects.equals(this.grantableRoles, corporationRolesResponse.grantableRoles)
                && Objects.equals(this.grantableRolesAtBase, corporationRolesResponse.grantableRolesAtBase)
                && Objects.equals(this.grantableRolesAtHq, corporationRolesResponse.grantableRolesAtHq)
                && Objects.equals(this.grantableRolesAtOther, corporationRolesResponse.grantableRolesAtOther)
                && Objects.equals(this.roles, corporationRolesResponse.roles)
                && Objects.equals(this.rolesAtBase, corporationRolesResponse.rolesAtBase)
                && Objects.equals(this.rolesAtHq, corporationRolesResponse.rolesAtHq)
                && Objects.equals(this.rolesAtOther, corporationRolesResponse.rolesAtOther);
    }

    @Override
    public int hashCode() {
        return Objects.hash(characterId, grantableRoles, grantableRolesAtBase, grantableRolesAtHq,
                grantableRolesAtOther, roles, rolesAtBase, rolesAtHq, rolesAtOther);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CorporationRolesResponse {\n");
        sb.append("    characterId: ").append(toIndentedString(characterId)).append("\n");
        sb.append("    grantableRoles: ").append(toIndentedString(grantableRoles)).append("\n");
        sb.append("    grantableRolesAtBase: ").append(toIndentedString(grantableRolesAtBase)).append("\n");
        sb.append("    grantableRolesAtHq: ").append(toIndentedString(grantableRolesAtHq)).append("\n");
        sb.append("    grantableRolesAtOther: ").append(toIndentedString(grantableRolesAtOther)).append("\n");
        sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
        sb.append("    rolesAtBase: ").append(toIndentedString(rolesAtBase)).append("\n");
        sb.append("    rolesAtHq: ").append(toIndentedString(rolesAtHq)).append("\n");
        sb.append("    rolesAtOther: ").append(toIndentedString(rolesAtOther)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("character_id");
        openapiFields.add("grantable_roles");
        openapiFields.add("grantable_roles_at_base");
        openapiFields.add("grantable_roles_at_hq");
        openapiFields.add("grantable_roles_at_other");
        openapiFields.add("roles");
        openapiFields.add("roles_at_base");
        openapiFields.add("roles_at_hq");
        openapiFields.add("roles_at_other");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("character_id");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to
     *             CorporationRolesResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CorporationRolesResponse.openapiRequiredFields.isEmpty()) { // has
                                                                             // required
                                                                             // fields
                                                                             // but
                                                                             // JSON
                                                                             // element
                                                                             // is
                                                                             // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in CorporationRolesResponse is not found in the empty JSON string",
                        CorporationRolesResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CorporationRolesResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CorporationRolesResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CorporationRolesResponse.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the optional json data is an array if present
        if (jsonObj.get("grantable_roles") != null && !jsonObj.get("grantable_roles").isJsonNull()
                && !jsonObj.get("grantable_roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `grantable_roles` to be an array in the JSON string but got `%s`",
                    jsonObj.get("grantable_roles").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("grantable_roles_at_base") != null && !jsonObj.get("grantable_roles_at_base").isJsonNull()
                && !jsonObj.get("grantable_roles_at_base").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `grantable_roles_at_base` to be an array in the JSON string but got `%s`",
                    jsonObj.get("grantable_roles_at_base").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("grantable_roles_at_hq") != null && !jsonObj.get("grantable_roles_at_hq").isJsonNull()
                && !jsonObj.get("grantable_roles_at_hq").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `grantable_roles_at_hq` to be an array in the JSON string but got `%s`",
                    jsonObj.get("grantable_roles_at_hq").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("grantable_roles_at_other") != null && !jsonObj.get("grantable_roles_at_other").isJsonNull()
                && !jsonObj.get("grantable_roles_at_other").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `grantable_roles_at_other` to be an array in the JSON string but got `%s`",
                    jsonObj.get("grantable_roles_at_other").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull() && !jsonObj.get("roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles")
                            .toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("roles_at_base") != null && !jsonObj.get("roles_at_base").isJsonNull()
                && !jsonObj.get("roles_at_base").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `roles_at_base` to be an array in the JSON string but got `%s`",
                    jsonObj.get("roles_at_base").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("roles_at_hq") != null && !jsonObj.get("roles_at_hq").isJsonNull()
                && !jsonObj.get("roles_at_hq").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `roles_at_hq` to be an array in the JSON string but got `%s`",
                    jsonObj.get("roles_at_hq").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("roles_at_other") != null && !jsonObj.get("roles_at_other").isJsonNull()
                && !jsonObj.get("roles_at_other").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `roles_at_other` to be an array in the JSON string but got `%s`",
                    jsonObj.get("roles_at_other").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CorporationRolesResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CorporationRolesResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CorporationRolesResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CorporationRolesResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CorporationRolesResponse>() {
                @Override
                public void write(JsonWriter out, CorporationRolesResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CorporationRolesResponse read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CorporationRolesResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CorporationRolesResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CorporationRolesResponse
     */
    public static CorporationRolesResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CorporationRolesResponse.class);
    }

    /**
     * Convert an instance of CorporationRolesResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
