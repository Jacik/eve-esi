/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * invitation object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class FleetInvitation implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_CHARACTER_ID = "character_id";
    @SerializedName(SERIALIZED_NAME_CHARACTER_ID)
    @javax.annotation.Nonnull
    private Integer characterId;

    /**
     * If a character is invited with the &#x60;fleet_commander&#x60; role,
     * neither &#x60;wing_id&#x60; or &#x60;squad_id&#x60; should be specified.
     * If a character is invited with the &#x60;wing_commander&#x60; role, only
     * &#x60;wing_id&#x60; should be specified. If a character is invited with
     * the &#x60;squad_commander&#x60; role, both &#x60;wing_id&#x60; and
     * &#x60;squad_id&#x60; should be specified. If a character is invited with
     * the &#x60;squad_member&#x60; role, &#x60;wing_id&#x60; and
     * &#x60;squad_id&#x60; should either both be specified or not specified at
     * all. If they aren’t specified, the invited character will join any squad
     * with available positions.
     */
    @JsonAdapter(RoleEnum.Adapter.class)
    public enum RoleEnum {
        FLEET_COMMANDER("fleet_commander"),

        WING_COMMANDER("wing_commander"),

        SQUAD_COMMANDER("squad_commander"),

        SQUAD_MEMBER("squad_member");

        private String value;

        RoleEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RoleEnum fromValue(String value) {
            for (RoleEnum b : RoleEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<RoleEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RoleEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RoleEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            RoleEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_ROLE = "role";
    @SerializedName(SERIALIZED_NAME_ROLE)
    @javax.annotation.Nonnull
    private String role;
    private RoleEnum roleEnum;

    public static final String SERIALIZED_NAME_SQUAD_ID = "squad_id";
    @SerializedName(SERIALIZED_NAME_SQUAD_ID)
    @javax.annotation.Nullable
    private Long squadId;

    public static final String SERIALIZED_NAME_WING_ID = "wing_id";
    @SerializedName(SERIALIZED_NAME_WING_ID)
    @javax.annotation.Nullable
    private Long wingId;

    public FleetInvitation() {
    }

    public FleetInvitation characterId(@javax.annotation.Nonnull Integer characterId) {
        this.characterId = characterId;
        return this;
    }

    /**
     * The character you want to invite
     * 
     * @return characterId
     */
    @javax.annotation.Nonnull
    public Integer getCharacterId() {
        return characterId;
    }

    public void setCharacterId(@javax.annotation.Nonnull Integer characterId) {
        this.characterId = characterId;
    }

    public FleetInvitation role(@javax.annotation.Nonnull RoleEnum role) {
        this.roleEnum = role;
        return this;
    }

    public FleetInvitation roleString(@javax.annotation.Nonnull String role) {
        this.role = role;
        return this;
    }

    /**
     * If a character is invited with the &#x60;fleet_commander&#x60; role,
     * neither &#x60;wing_id&#x60; or &#x60;squad_id&#x60; should be specified.
     * If a character is invited with the &#x60;wing_commander&#x60; role, only
     * &#x60;wing_id&#x60; should be specified. If a character is invited with
     * the &#x60;squad_commander&#x60; role, both &#x60;wing_id&#x60; and
     * &#x60;squad_id&#x60; should be specified. If a character is invited with
     * the &#x60;squad_member&#x60; role, &#x60;wing_id&#x60; and
     * &#x60;squad_id&#x60; should either both be specified or not specified at
     * all. If they aren’t specified, the invited character will join any squad
     * with available positions.
     * 
     * @return role
     */

    public RoleEnum getRole() {
        if (roleEnum == null) {
            roleEnum = RoleEnum.fromValue(role);
        }
        return roleEnum;
    }

    public String getRoleString() {
        return role;
    }

    public void setRole(@javax.annotation.Nonnull RoleEnum role) {
        this.roleEnum = role;
    }

    public void setRoleString(@javax.annotation.Nonnull String role) {
        this.role = role;
    }

    public FleetInvitation squadId(@javax.annotation.Nullable Long squadId) {
        this.squadId = squadId;
        return this;
    }

    /**
     * squad_id integer minimum: 0
     * 
     * @return squadId
     */
    @javax.annotation.Nullable
    public Long getSquadId() {
        return squadId;
    }

    public void setSquadId(@javax.annotation.Nullable Long squadId) {
        this.squadId = squadId;
    }

    public FleetInvitation wingId(@javax.annotation.Nullable Long wingId) {
        this.wingId = wingId;
        return this;
    }

    /**
     * wing_id integer minimum: 0
     * 
     * @return wingId
     */
    @javax.annotation.Nullable
    public Long getWingId() {
        return wingId;
    }

    public void setWingId(@javax.annotation.Nullable Long wingId) {
        this.wingId = wingId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FleetInvitation fleetInvitation = (FleetInvitation) o;
        return Objects.equals(this.characterId, fleetInvitation.characterId)
                && Objects.equals(this.role, fleetInvitation.role)
                && Objects.equals(this.squadId, fleetInvitation.squadId)
                && Objects.equals(this.wingId, fleetInvitation.wingId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(characterId, role, squadId, wingId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FleetInvitation {\n");
        sb.append("    characterId: ").append(toIndentedString(characterId)).append("\n");
        sb.append("    role: ").append(toIndentedString(role)).append("\n");
        sb.append("    squadId: ").append(toIndentedString(squadId)).append("\n");
        sb.append("    wingId: ").append(toIndentedString(wingId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("character_id");
        openapiFields.add("role");
        openapiFields.add("squad_id");
        openapiFields.add("wing_id");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("character_id");
        openapiRequiredFields.add("role");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to
     *             FleetInvitation
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!FleetInvitation.openapiRequiredFields.isEmpty()) { // has
                                                                    // required
                                                                    // fields
                                                                    // but JSON
                                                                    // element
                                                                    // is null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in FleetInvitation is not found in the empty JSON string",
                        FleetInvitation.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!FleetInvitation.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `FleetInvitation` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : FleetInvitation.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("role").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `role` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("role").toString()));
        }
        // validate the required field `role`
        RoleEnum.validateJsonElement(jsonObj.get("role"));
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FleetInvitation.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FleetInvitation' and
                             // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FleetInvitation> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(FleetInvitation.class));

            return (TypeAdapter<T>) new TypeAdapter<FleetInvitation>() {
                @Override
                public void write(JsonWriter out, FleetInvitation value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public FleetInvitation read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of FleetInvitation given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of FleetInvitation
     * @throws IOException
     *             if the JSON string is invalid with respect to FleetInvitation
     */
    public static FleetInvitation fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FleetInvitation.class);
    }

    /**
     * Convert an instance of FleetInvitation to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
