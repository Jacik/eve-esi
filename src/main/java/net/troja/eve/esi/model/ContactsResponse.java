/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class ContactsResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_CONTACT_ID = "contact_id";
    @SerializedName(SERIALIZED_NAME_CONTACT_ID)
    @javax.annotation.Nonnull
    private Integer contactId;

    /**
     * contact_type string
     */
    @JsonAdapter(ContactTypeEnum.Adapter.class)
    public enum ContactTypeEnum {
        CHARACTER("character"),

        CORPORATION("corporation"),

        ALLIANCE("alliance"),

        FACTION("faction");

        private String value;

        ContactTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ContactTypeEnum fromValue(String value) {
            for (ContactTypeEnum b : ContactTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<ContactTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ContactTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ContactTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ContactTypeEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            ContactTypeEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_CONTACT_TYPE = "contact_type";
    @SerializedName(SERIALIZED_NAME_CONTACT_TYPE)
    @javax.annotation.Nonnull
    private String contactType;
    private ContactTypeEnum contactTypeEnum;

    public static final String SERIALIZED_NAME_IS_BLOCKED = "is_blocked";
    @SerializedName(SERIALIZED_NAME_IS_BLOCKED)
    @javax.annotation.Nullable
    private Boolean isBlocked;

    public static final String SERIALIZED_NAME_IS_WATCHED = "is_watched";
    @SerializedName(SERIALIZED_NAME_IS_WATCHED)
    @javax.annotation.Nullable
    private Boolean isWatched;

    public static final String SERIALIZED_NAME_LABEL_IDS = "label_ids";
    @SerializedName(SERIALIZED_NAME_LABEL_IDS)
    @javax.annotation.Nullable
    private List<Long> labelIds;

    public static final String SERIALIZED_NAME_STANDING = "standing";
    @SerializedName(SERIALIZED_NAME_STANDING)
    @javax.annotation.Nonnull
    private Float standing;

    public ContactsResponse() {
    }

    public ContactsResponse contactId(@javax.annotation.Nonnull Integer contactId) {
        this.contactId = contactId;
        return this;
    }

    /**
     * contact_id integer
     * 
     * @return contactId
     */
    @javax.annotation.Nonnull
    public Integer getContactId() {
        return contactId;
    }

    public void setContactId(@javax.annotation.Nonnull Integer contactId) {
        this.contactId = contactId;
    }

    public ContactsResponse contactType(@javax.annotation.Nonnull ContactTypeEnum contactType) {
        this.contactTypeEnum = contactType;
        return this;
    }

    public ContactsResponse contactTypeString(@javax.annotation.Nonnull String contactType) {
        this.contactType = contactType;
        return this;
    }

    /**
     * contact_type string
     * 
     * @return contactType
     */

    public ContactTypeEnum getContactType() {
        if (contactTypeEnum == null) {
            contactTypeEnum = ContactTypeEnum.fromValue(contactType);
        }
        return contactTypeEnum;
    }

    public String getContactTypeString() {
        return contactType;
    }

    public void setContactType(@javax.annotation.Nonnull ContactTypeEnum contactType) {
        this.contactTypeEnum = contactType;
    }

    public void setContactTypeString(@javax.annotation.Nonnull String contactType) {
        this.contactType = contactType;
    }

    public ContactsResponse isBlocked(@javax.annotation.Nullable Boolean isBlocked) {
        this.isBlocked = isBlocked;
        return this;
    }

    /**
     * Whether this contact is in the blocked list. Note a missing value denotes
     * unknown, not true or false
     * 
     * @return isBlocked
     */
    @javax.annotation.Nullable
    public Boolean getIsBlocked() {
        return isBlocked;
    }

    public void setIsBlocked(@javax.annotation.Nullable Boolean isBlocked) {
        this.isBlocked = isBlocked;
    }

    public ContactsResponse isWatched(@javax.annotation.Nullable Boolean isWatched) {
        this.isWatched = isWatched;
        return this;
    }

    /**
     * Whether this contact is being watched
     * 
     * @return isWatched
     */
    @javax.annotation.Nullable
    public Boolean getIsWatched() {
        return isWatched;
    }

    public void setIsWatched(@javax.annotation.Nullable Boolean isWatched) {
        this.isWatched = isWatched;
    }

    public ContactsResponse labelIds(@javax.annotation.Nullable List<Long> labelIds) {
        this.labelIds = labelIds;
        return this;
    }

    public ContactsResponse addLabelIdsItem(Long labelIdsItem) {
        if (this.labelIds == null) {
            this.labelIds = new ArrayList<>();
        }

        this.labelIds.add(labelIdsItem);
        return this;
    }

    /**
     * label_ids array
     * 
     * @return labelIds
     */
    @javax.annotation.Nullable
    public List<Long> getLabelIds() {
        return labelIds;
    }

    public void setLabelIds(@javax.annotation.Nullable List<Long> labelIds) {
        this.labelIds = labelIds;
    }

    public ContactsResponse standing(@javax.annotation.Nonnull Float standing) {
        this.standing = standing;
        return this;
    }

    /**
     * Standing of the contact
     * 
     * @return standing
     */
    @javax.annotation.Nonnull
    public Float getStanding() {
        return standing;
    }

    public void setStanding(@javax.annotation.Nonnull Float standing) {
        this.standing = standing;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContactsResponse contactsResponse = (ContactsResponse) o;
        return Objects.equals(this.contactId, contactsResponse.contactId)
                && Objects.equals(this.contactType, contactsResponse.contactType)
                && Objects.equals(this.isBlocked, contactsResponse.isBlocked)
                && Objects.equals(this.isWatched, contactsResponse.isWatched)
                && Objects.equals(this.labelIds, contactsResponse.labelIds)
                && Objects.equals(this.standing, contactsResponse.standing);
    }

    @Override
    public int hashCode() {
        return Objects.hash(contactId, contactType, isBlocked, isWatched, labelIds, standing);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ContactsResponse {\n");
        sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
        sb.append("    contactType: ").append(toIndentedString(contactType)).append("\n");
        sb.append("    isBlocked: ").append(toIndentedString(isBlocked)).append("\n");
        sb.append("    isWatched: ").append(toIndentedString(isWatched)).append("\n");
        sb.append("    labelIds: ").append(toIndentedString(labelIds)).append("\n");
        sb.append("    standing: ").append(toIndentedString(standing)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("contact_id");
        openapiFields.add("contact_type");
        openapiFields.add("is_blocked");
        openapiFields.add("is_watched");
        openapiFields.add("label_ids");
        openapiFields.add("standing");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("contact_id");
        openapiRequiredFields.add("contact_type");
        openapiRequiredFields.add("standing");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to
     *             ContactsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ContactsResponse.openapiRequiredFields.isEmpty()) { // has
                                                                     // required
                                                                     // fields
                                                                     // but JSON
                                                                     // element
                                                                     // is null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in ContactsResponse is not found in the empty JSON string",
                        ContactsResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ContactsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `ContactsResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : ContactsResponse.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("contact_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `contact_type` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("contact_type").toString()));
        }
        // validate the required field `contact_type`
        ContactTypeEnum.validateJsonElement(jsonObj.get("contact_type"));
        // ensure the optional json data is an array if present
        if (jsonObj.get("label_ids") != null && !jsonObj.get("label_ids").isJsonNull()
                && !jsonObj.get("label_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `label_ids` to be an array in the JSON string but got `%s`",
                    jsonObj.get("label_ids").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ContactsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ContactsResponse'
                             // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ContactsResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(ContactsResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<ContactsResponse>() {
                @Override
                public void write(JsonWriter out, ContactsResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public ContactsResponse read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of ContactsResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of ContactsResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             ContactsResponse
     */
    public static ContactsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ContactsResponse.class);
    }

    /**
     * Convert an instance of ContactsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
