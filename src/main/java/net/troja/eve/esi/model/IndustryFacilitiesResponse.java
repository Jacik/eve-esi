/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class IndustryFacilitiesResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_FACILITY_ID = "facility_id";
    @SerializedName(SERIALIZED_NAME_FACILITY_ID)
    @javax.annotation.Nonnull
    private Long facilityId;

    public static final String SERIALIZED_NAME_OWNER_ID = "owner_id";
    @SerializedName(SERIALIZED_NAME_OWNER_ID)
    @javax.annotation.Nonnull
    private Integer ownerId;

    public static final String SERIALIZED_NAME_REGION_ID = "region_id";
    @SerializedName(SERIALIZED_NAME_REGION_ID)
    @javax.annotation.Nonnull
    private Integer regionId;

    public static final String SERIALIZED_NAME_SOLAR_SYSTEM_ID = "solar_system_id";
    @SerializedName(SERIALIZED_NAME_SOLAR_SYSTEM_ID)
    @javax.annotation.Nonnull
    private Integer solarSystemId;

    public static final String SERIALIZED_NAME_TAX = "tax";
    @SerializedName(SERIALIZED_NAME_TAX)
    @javax.annotation.Nullable
    private Float tax;

    public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
    @SerializedName(SERIALIZED_NAME_TYPE_ID)
    @javax.annotation.Nonnull
    private Integer typeId;

    public IndustryFacilitiesResponse() {
    }

    public IndustryFacilitiesResponse facilityId(@javax.annotation.Nonnull Long facilityId) {
        this.facilityId = facilityId;
        return this;
    }

    /**
     * ID of the facility
     * 
     * @return facilityId
     */
    @javax.annotation.Nonnull
    public Long getFacilityId() {
        return facilityId;
    }

    public void setFacilityId(@javax.annotation.Nonnull Long facilityId) {
        this.facilityId = facilityId;
    }

    public IndustryFacilitiesResponse ownerId(@javax.annotation.Nonnull Integer ownerId) {
        this.ownerId = ownerId;
        return this;
    }

    /**
     * Owner of the facility
     * 
     * @return ownerId
     */
    @javax.annotation.Nonnull
    public Integer getOwnerId() {
        return ownerId;
    }

    public void setOwnerId(@javax.annotation.Nonnull Integer ownerId) {
        this.ownerId = ownerId;
    }

    public IndustryFacilitiesResponse regionId(@javax.annotation.Nonnull Integer regionId) {
        this.regionId = regionId;
        return this;
    }

    /**
     * Region ID where the facility is
     * 
     * @return regionId
     */
    @javax.annotation.Nonnull
    public Integer getRegionId() {
        return regionId;
    }

    public void setRegionId(@javax.annotation.Nonnull Integer regionId) {
        this.regionId = regionId;
    }

    public IndustryFacilitiesResponse solarSystemId(@javax.annotation.Nonnull Integer solarSystemId) {
        this.solarSystemId = solarSystemId;
        return this;
    }

    /**
     * Solar system ID where the facility is
     * 
     * @return solarSystemId
     */
    @javax.annotation.Nonnull
    public Integer getSolarSystemId() {
        return solarSystemId;
    }

    public void setSolarSystemId(@javax.annotation.Nonnull Integer solarSystemId) {
        this.solarSystemId = solarSystemId;
    }

    public IndustryFacilitiesResponse tax(@javax.annotation.Nullable Float tax) {
        this.tax = tax;
        return this;
    }

    /**
     * Tax imposed by the facility
     * 
     * @return tax
     */
    @javax.annotation.Nullable
    public Float getTax() {
        return tax;
    }

    public void setTax(@javax.annotation.Nullable Float tax) {
        this.tax = tax;
    }

    public IndustryFacilitiesResponse typeId(@javax.annotation.Nonnull Integer typeId) {
        this.typeId = typeId;
        return this;
    }

    /**
     * Type ID of the facility
     * 
     * @return typeId
     */
    @javax.annotation.Nonnull
    public Integer getTypeId() {
        return typeId;
    }

    public void setTypeId(@javax.annotation.Nonnull Integer typeId) {
        this.typeId = typeId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IndustryFacilitiesResponse industryFacilitiesResponse = (IndustryFacilitiesResponse) o;
        return Objects.equals(this.facilityId, industryFacilitiesResponse.facilityId)
                && Objects.equals(this.ownerId, industryFacilitiesResponse.ownerId)
                && Objects.equals(this.regionId, industryFacilitiesResponse.regionId)
                && Objects.equals(this.solarSystemId, industryFacilitiesResponse.solarSystemId)
                && Objects.equals(this.tax, industryFacilitiesResponse.tax)
                && Objects.equals(this.typeId, industryFacilitiesResponse.typeId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(facilityId, ownerId, regionId, solarSystemId, tax, typeId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class IndustryFacilitiesResponse {\n");
        sb.append("    facilityId: ").append(toIndentedString(facilityId)).append("\n");
        sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
        sb.append("    regionId: ").append(toIndentedString(regionId)).append("\n");
        sb.append("    solarSystemId: ").append(toIndentedString(solarSystemId)).append("\n");
        sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
        sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("facility_id");
        openapiFields.add("owner_id");
        openapiFields.add("region_id");
        openapiFields.add("solar_system_id");
        openapiFields.add("tax");
        openapiFields.add("type_id");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("facility_id");
        openapiRequiredFields.add("owner_id");
        openapiRequiredFields.add("region_id");
        openapiRequiredFields.add("solar_system_id");
        openapiRequiredFields.add("type_id");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to
     *             IndustryFacilitiesResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!IndustryFacilitiesResponse.openapiRequiredFields.isEmpty()) { // has
                                                                               // required
                                                                               // fields
                                                                               // but
                                                                               // JSON
                                                                               // element
                                                                               // is
                                                                               // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in IndustryFacilitiesResponse is not found in the empty JSON string",
                        IndustryFacilitiesResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!IndustryFacilitiesResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `IndustryFacilitiesResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : IndustryFacilitiesResponse.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!IndustryFacilitiesResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'IndustryFacilitiesResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<IndustryFacilitiesResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(IndustryFacilitiesResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<IndustryFacilitiesResponse>() {
                @Override
                public void write(JsonWriter out, IndustryFacilitiesResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public IndustryFacilitiesResponse read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of IndustryFacilitiesResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of IndustryFacilitiesResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             IndustryFacilitiesResponse
     */
    public static IndustryFacilitiesResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, IndustryFacilitiesResponse.class);
    }

    /**
     * Convert an instance of IndustryFacilitiesResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
