/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class CorporationContractsItemsResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_IS_INCLUDED = "is_included";
    @SerializedName(SERIALIZED_NAME_IS_INCLUDED)
    @javax.annotation.Nonnull
    private Boolean isIncluded;

    public static final String SERIALIZED_NAME_IS_SINGLETON = "is_singleton";
    @SerializedName(SERIALIZED_NAME_IS_SINGLETON)
    @javax.annotation.Nonnull
    private Boolean isSingleton;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";
    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @javax.annotation.Nonnull
    private Integer quantity;

    public static final String SERIALIZED_NAME_RAW_QUANTITY = "raw_quantity";
    @SerializedName(SERIALIZED_NAME_RAW_QUANTITY)
    @javax.annotation.Nullable
    private Integer rawQuantity;

    public static final String SERIALIZED_NAME_RECORD_ID = "record_id";
    @SerializedName(SERIALIZED_NAME_RECORD_ID)
    @javax.annotation.Nonnull
    private Long recordId;

    public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
    @SerializedName(SERIALIZED_NAME_TYPE_ID)
    @javax.annotation.Nonnull
    private Integer typeId;

    public CorporationContractsItemsResponse() {
    }

    public CorporationContractsItemsResponse isIncluded(@javax.annotation.Nonnull Boolean isIncluded) {
        this.isIncluded = isIncluded;
        return this;
    }

    /**
     * true if the contract issuer has submitted this item with the contract,
     * false if the isser is asking for this item in the contract
     * 
     * @return isIncluded
     */
    @javax.annotation.Nonnull
    public Boolean getIsIncluded() {
        return isIncluded;
    }

    public void setIsIncluded(@javax.annotation.Nonnull Boolean isIncluded) {
        this.isIncluded = isIncluded;
    }

    public CorporationContractsItemsResponse isSingleton(@javax.annotation.Nonnull Boolean isSingleton) {
        this.isSingleton = isSingleton;
        return this;
    }

    /**
     * is_singleton boolean
     * 
     * @return isSingleton
     */
    @javax.annotation.Nonnull
    public Boolean getIsSingleton() {
        return isSingleton;
    }

    public void setIsSingleton(@javax.annotation.Nonnull Boolean isSingleton) {
        this.isSingleton = isSingleton;
    }

    public CorporationContractsItemsResponse quantity(@javax.annotation.Nonnull Integer quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Number of items in the stack
     * 
     * @return quantity
     */
    @javax.annotation.Nonnull
    public Integer getQuantity() {
        return quantity;
    }

    public void setQuantity(@javax.annotation.Nonnull Integer quantity) {
        this.quantity = quantity;
    }

    public CorporationContractsItemsResponse rawQuantity(@javax.annotation.Nullable Integer rawQuantity) {
        this.rawQuantity = rawQuantity;
        return this;
    }

    /**
     * -1 indicates that the item is a singleton (non-stackable). If the item
     * happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy
     * 
     * @return rawQuantity
     */
    @javax.annotation.Nullable
    public Integer getRawQuantity() {
        return rawQuantity;
    }

    public void setRawQuantity(@javax.annotation.Nullable Integer rawQuantity) {
        this.rawQuantity = rawQuantity;
    }

    public CorporationContractsItemsResponse recordId(@javax.annotation.Nonnull Long recordId) {
        this.recordId = recordId;
        return this;
    }

    /**
     * Unique ID for the item
     * 
     * @return recordId
     */
    @javax.annotation.Nonnull
    public Long getRecordId() {
        return recordId;
    }

    public void setRecordId(@javax.annotation.Nonnull Long recordId) {
        this.recordId = recordId;
    }

    public CorporationContractsItemsResponse typeId(@javax.annotation.Nonnull Integer typeId) {
        this.typeId = typeId;
        return this;
    }

    /**
     * Type ID for item
     * 
     * @return typeId
     */
    @javax.annotation.Nonnull
    public Integer getTypeId() {
        return typeId;
    }

    public void setTypeId(@javax.annotation.Nonnull Integer typeId) {
        this.typeId = typeId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CorporationContractsItemsResponse corporationContractsItemsResponse = (CorporationContractsItemsResponse) o;
        return Objects.equals(this.isIncluded, corporationContractsItemsResponse.isIncluded)
                && Objects.equals(this.isSingleton, corporationContractsItemsResponse.isSingleton)
                && Objects.equals(this.quantity, corporationContractsItemsResponse.quantity)
                && Objects.equals(this.rawQuantity, corporationContractsItemsResponse.rawQuantity)
                && Objects.equals(this.recordId, corporationContractsItemsResponse.recordId)
                && Objects.equals(this.typeId, corporationContractsItemsResponse.typeId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(isIncluded, isSingleton, quantity, rawQuantity, recordId, typeId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CorporationContractsItemsResponse {\n");
        sb.append("    isIncluded: ").append(toIndentedString(isIncluded)).append("\n");
        sb.append("    isSingleton: ").append(toIndentedString(isSingleton)).append("\n");
        sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("    rawQuantity: ").append(toIndentedString(rawQuantity)).append("\n");
        sb.append("    recordId: ").append(toIndentedString(recordId)).append("\n");
        sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("is_included");
        openapiFields.add("is_singleton");
        openapiFields.add("quantity");
        openapiFields.add("raw_quantity");
        openapiFields.add("record_id");
        openapiFields.add("type_id");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("is_included");
        openapiRequiredFields.add("is_singleton");
        openapiRequiredFields.add("quantity");
        openapiRequiredFields.add("record_id");
        openapiRequiredFields.add("type_id");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to
     *             CorporationContractsItemsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CorporationContractsItemsResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                      // required
                                                                                      // fields
                                                                                      // but
                                                                                      // JSON
                                                                                      // element
                                                                                      // is
                                                                                      // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CorporationContractsItemsResponse is not found in the empty JSON string",
                                CorporationContractsItemsResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CorporationContractsItemsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CorporationContractsItemsResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CorporationContractsItemsResponse.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CorporationContractsItemsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CorporationContractsItemsResponse' and its
                             // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CorporationContractsItemsResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CorporationContractsItemsResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CorporationContractsItemsResponse>() {
                @Override
                public void write(JsonWriter out, CorporationContractsItemsResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CorporationContractsItemsResponse read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CorporationContractsItemsResponse given an JSON
     * string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CorporationContractsItemsResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CorporationContractsItemsResponse
     */
    public static CorporationContractsItemsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CorporationContractsItemsResponse.class);
    }

    /**
     * Convert an instance of CorporationContractsItemsResponse to an JSON
     * string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
