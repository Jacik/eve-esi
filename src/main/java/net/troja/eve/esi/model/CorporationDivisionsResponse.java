/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import net.troja.eve.esi.model.CorporationDivisionsHangar;
import net.troja.eve.esi.model.CorporationDivisionsWallet;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class CorporationDivisionsResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_HANGAR = "hangar";
    @SerializedName(SERIALIZED_NAME_HANGAR)
    @javax.annotation.Nullable
    private List<CorporationDivisionsHangar> hangar = new ArrayList<>();

    public static final String SERIALIZED_NAME_WALLET = "wallet";
    @SerializedName(SERIALIZED_NAME_WALLET)
    @javax.annotation.Nullable
    private List<CorporationDivisionsWallet> wallet = new ArrayList<>();

    public CorporationDivisionsResponse() {
    }

    public CorporationDivisionsResponse hangar(@javax.annotation.Nullable List<CorporationDivisionsHangar> hangar) {
        this.hangar = hangar;
        return this;
    }

    public CorporationDivisionsResponse addHangarItem(CorporationDivisionsHangar hangarItem) {
        if (this.hangar == null) {
            this.hangar = new ArrayList<>();
        }

        this.hangar.add(hangarItem);
        return this;
    }

    /**
     * hangar array
     * 
     * @return hangar
     */
    @javax.annotation.Nullable
    public List<CorporationDivisionsHangar> getHangar() {
        return hangar;
    }

    public void setHangar(@javax.annotation.Nullable List<CorporationDivisionsHangar> hangar) {
        this.hangar = hangar;
    }

    public CorporationDivisionsResponse wallet(@javax.annotation.Nullable List<CorporationDivisionsWallet> wallet) {
        this.wallet = wallet;
        return this;
    }

    public CorporationDivisionsResponse addWalletItem(CorporationDivisionsWallet walletItem) {
        if (this.wallet == null) {
            this.wallet = new ArrayList<>();
        }

        this.wallet.add(walletItem);
        return this;
    }

    /**
     * wallet array
     * 
     * @return wallet
     */
    @javax.annotation.Nullable
    public List<CorporationDivisionsWallet> getWallet() {
        return wallet;
    }

    public void setWallet(@javax.annotation.Nullable List<CorporationDivisionsWallet> wallet) {
        this.wallet = wallet;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CorporationDivisionsResponse corporationDivisionsResponse = (CorporationDivisionsResponse) o;
        return Objects.equals(this.hangar, corporationDivisionsResponse.hangar)
                && Objects.equals(this.wallet, corporationDivisionsResponse.wallet);
    }

    @Override
    public int hashCode() {
        return Objects.hash(hangar, wallet);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CorporationDivisionsResponse {\n");
        sb.append("    hangar: ").append(toIndentedString(hangar)).append("\n");
        sb.append("    wallet: ").append(toIndentedString(wallet)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("hangar");
        openapiFields.add("wallet");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to
     *             CorporationDivisionsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CorporationDivisionsResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                 // required
                                                                                 // fields
                                                                                 // but
                                                                                 // JSON
                                                                                 // element
                                                                                 // is
                                                                                 // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CorporationDivisionsResponse is not found in the empty JSON string",
                                CorporationDivisionsResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CorporationDivisionsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CorporationDivisionsResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("hangar") != null && !jsonObj.get("hangar").isJsonNull()) {
            JsonArray jsonArrayhangar = jsonObj.getAsJsonArray("hangar");
            if (jsonArrayhangar != null) {
                // ensure the json data is an array
                if (!jsonObj.get("hangar").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `hangar` to be an array in the JSON string but got `%s`",
                            jsonObj.get("hangar").toString()));
                }

                // validate the optional field `hangar` (array)
                for (int i = 0; i < jsonArrayhangar.size(); i++) {
                    CorporationDivisionsHangar.validateJsonElement(jsonArrayhangar.get(i));
                };
            }
        }
        if (jsonObj.get("wallet") != null && !jsonObj.get("wallet").isJsonNull()) {
            JsonArray jsonArraywallet = jsonObj.getAsJsonArray("wallet");
            if (jsonArraywallet != null) {
                // ensure the json data is an array
                if (!jsonObj.get("wallet").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `wallet` to be an array in the JSON string but got `%s`",
                            jsonObj.get("wallet").toString()));
                }

                // validate the optional field `wallet` (array)
                for (int i = 0; i < jsonArraywallet.size(); i++) {
                    CorporationDivisionsWallet.validateJsonElement(jsonArraywallet.get(i));
                };
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CorporationDivisionsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CorporationDivisionsResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CorporationDivisionsResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CorporationDivisionsResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CorporationDivisionsResponse>() {
                @Override
                public void write(JsonWriter out, CorporationDivisionsResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CorporationDivisionsResponse read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CorporationDivisionsResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CorporationDivisionsResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CorporationDivisionsResponse
     */
    public static CorporationDivisionsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CorporationDivisionsResponse.class);
    }

    /**
     * Convert an instance of CorporationDivisionsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
