/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class CharacterPlanetsResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_LAST_UPDATE = "last_update";
    @SerializedName(SERIALIZED_NAME_LAST_UPDATE)
    @javax.annotation.Nonnull
    private OffsetDateTime lastUpdate;

    public static final String SERIALIZED_NAME_NUM_PINS = "num_pins";
    @SerializedName(SERIALIZED_NAME_NUM_PINS)
    @javax.annotation.Nonnull
    private Integer numPins;

    public static final String SERIALIZED_NAME_OWNER_ID = "owner_id";
    @SerializedName(SERIALIZED_NAME_OWNER_ID)
    @javax.annotation.Nonnull
    private Integer ownerId;

    public static final String SERIALIZED_NAME_PLANET_ID = "planet_id";
    @SerializedName(SERIALIZED_NAME_PLANET_ID)
    @javax.annotation.Nonnull
    private Integer planetId;

    /**
     * planet_type string
     */
    @JsonAdapter(PlanetTypeEnum.Adapter.class)
    public enum PlanetTypeEnum {
        TEMPERATE("temperate"),

        BARREN("barren"),

        OCEANIC("oceanic"),

        ICE("ice"),

        GAS("gas"),

        LAVA("lava"),

        STORM("storm"),

        PLASMA("plasma");

        private String value;

        PlanetTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static PlanetTypeEnum fromValue(String value) {
            for (PlanetTypeEnum b : PlanetTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<PlanetTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final PlanetTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public PlanetTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return PlanetTypeEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            PlanetTypeEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_PLANET_TYPE = "planet_type";
    @SerializedName(SERIALIZED_NAME_PLANET_TYPE)
    @javax.annotation.Nonnull
    private String planetType;
    private PlanetTypeEnum planetTypeEnum;

    public static final String SERIALIZED_NAME_SOLAR_SYSTEM_ID = "solar_system_id";
    @SerializedName(SERIALIZED_NAME_SOLAR_SYSTEM_ID)
    @javax.annotation.Nonnull
    private Integer solarSystemId;

    public static final String SERIALIZED_NAME_UPGRADE_LEVEL = "upgrade_level";
    @SerializedName(SERIALIZED_NAME_UPGRADE_LEVEL)
    @javax.annotation.Nonnull
    private Integer upgradeLevel;

    public CharacterPlanetsResponse() {
    }

    public CharacterPlanetsResponse lastUpdate(@javax.annotation.Nonnull OffsetDateTime lastUpdate) {
        this.lastUpdate = lastUpdate;
        return this;
    }

    /**
     * last_update string
     * 
     * @return lastUpdate
     */
    @javax.annotation.Nonnull
    public OffsetDateTime getLastUpdate() {
        return lastUpdate;
    }

    public void setLastUpdate(@javax.annotation.Nonnull OffsetDateTime lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    public CharacterPlanetsResponse numPins(@javax.annotation.Nonnull Integer numPins) {
        this.numPins = numPins;
        return this;
    }

    /**
     * num_pins integer minimum: 1
     * 
     * @return numPins
     */
    @javax.annotation.Nonnull
    public Integer getNumPins() {
        return numPins;
    }

    public void setNumPins(@javax.annotation.Nonnull Integer numPins) {
        this.numPins = numPins;
    }

    public CharacterPlanetsResponse ownerId(@javax.annotation.Nonnull Integer ownerId) {
        this.ownerId = ownerId;
        return this;
    }

    /**
     * owner_id integer
     * 
     * @return ownerId
     */
    @javax.annotation.Nonnull
    public Integer getOwnerId() {
        return ownerId;
    }

    public void setOwnerId(@javax.annotation.Nonnull Integer ownerId) {
        this.ownerId = ownerId;
    }

    public CharacterPlanetsResponse planetId(@javax.annotation.Nonnull Integer planetId) {
        this.planetId = planetId;
        return this;
    }

    /**
     * planet_id integer
     * 
     * @return planetId
     */
    @javax.annotation.Nonnull
    public Integer getPlanetId() {
        return planetId;
    }

    public void setPlanetId(@javax.annotation.Nonnull Integer planetId) {
        this.planetId = planetId;
    }

    public CharacterPlanetsResponse planetType(@javax.annotation.Nonnull PlanetTypeEnum planetType) {
        this.planetTypeEnum = planetType;
        return this;
    }

    public CharacterPlanetsResponse planetTypeString(@javax.annotation.Nonnull String planetType) {
        this.planetType = planetType;
        return this;
    }

    /**
     * planet_type string
     * 
     * @return planetType
     */

    public PlanetTypeEnum getPlanetType() {
        if (planetTypeEnum == null) {
            planetTypeEnum = PlanetTypeEnum.fromValue(planetType);
        }
        return planetTypeEnum;
    }

    public String getPlanetTypeString() {
        return planetType;
    }

    public void setPlanetType(@javax.annotation.Nonnull PlanetTypeEnum planetType) {
        this.planetTypeEnum = planetType;
    }

    public void setPlanetTypeString(@javax.annotation.Nonnull String planetType) {
        this.planetType = planetType;
    }

    public CharacterPlanetsResponse solarSystemId(@javax.annotation.Nonnull Integer solarSystemId) {
        this.solarSystemId = solarSystemId;
        return this;
    }

    /**
     * solar_system_id integer
     * 
     * @return solarSystemId
     */
    @javax.annotation.Nonnull
    public Integer getSolarSystemId() {
        return solarSystemId;
    }

    public void setSolarSystemId(@javax.annotation.Nonnull Integer solarSystemId) {
        this.solarSystemId = solarSystemId;
    }

    public CharacterPlanetsResponse upgradeLevel(@javax.annotation.Nonnull Integer upgradeLevel) {
        this.upgradeLevel = upgradeLevel;
        return this;
    }

    /**
     * upgrade_level integer minimum: 0 maximum: 5
     * 
     * @return upgradeLevel
     */
    @javax.annotation.Nonnull
    public Integer getUpgradeLevel() {
        return upgradeLevel;
    }

    public void setUpgradeLevel(@javax.annotation.Nonnull Integer upgradeLevel) {
        this.upgradeLevel = upgradeLevel;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CharacterPlanetsResponse characterPlanetsResponse = (CharacterPlanetsResponse) o;
        return Objects.equals(this.lastUpdate, characterPlanetsResponse.lastUpdate)
                && Objects.equals(this.numPins, characterPlanetsResponse.numPins)
                && Objects.equals(this.ownerId, characterPlanetsResponse.ownerId)
                && Objects.equals(this.planetId, characterPlanetsResponse.planetId)
                && Objects.equals(this.planetType, characterPlanetsResponse.planetType)
                && Objects.equals(this.solarSystemId, characterPlanetsResponse.solarSystemId)
                && Objects.equals(this.upgradeLevel, characterPlanetsResponse.upgradeLevel);
    }

    @Override
    public int hashCode() {
        return Objects.hash(lastUpdate, numPins, ownerId, planetId, planetType, solarSystemId, upgradeLevel);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CharacterPlanetsResponse {\n");
        sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
        sb.append("    numPins: ").append(toIndentedString(numPins)).append("\n");
        sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
        sb.append("    planetId: ").append(toIndentedString(planetId)).append("\n");
        sb.append("    planetType: ").append(toIndentedString(planetType)).append("\n");
        sb.append("    solarSystemId: ").append(toIndentedString(solarSystemId)).append("\n");
        sb.append("    upgradeLevel: ").append(toIndentedString(upgradeLevel)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("last_update");
        openapiFields.add("num_pins");
        openapiFields.add("owner_id");
        openapiFields.add("planet_id");
        openapiFields.add("planet_type");
        openapiFields.add("solar_system_id");
        openapiFields.add("upgrade_level");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("last_update");
        openapiRequiredFields.add("num_pins");
        openapiRequiredFields.add("owner_id");
        openapiRequiredFields.add("planet_id");
        openapiRequiredFields.add("planet_type");
        openapiRequiredFields.add("solar_system_id");
        openapiRequiredFields.add("upgrade_level");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to
     *             CharacterPlanetsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CharacterPlanetsResponse.openapiRequiredFields.isEmpty()) { // has
                                                                             // required
                                                                             // fields
                                                                             // but
                                                                             // JSON
                                                                             // element
                                                                             // is
                                                                             // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in CharacterPlanetsResponse is not found in the empty JSON string",
                        CharacterPlanetsResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CharacterPlanetsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CharacterPlanetsResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CharacterPlanetsResponse.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("planet_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `planet_type` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("planet_type").toString()));
        }
        // validate the required field `planet_type`
        PlanetTypeEnum.validateJsonElement(jsonObj.get("planet_type"));
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CharacterPlanetsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CharacterPlanetsResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CharacterPlanetsResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CharacterPlanetsResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CharacterPlanetsResponse>() {
                @Override
                public void write(JsonWriter out, CharacterPlanetsResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CharacterPlanetsResponse read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CharacterPlanetsResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CharacterPlanetsResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CharacterPlanetsResponse
     */
    public static CharacterPlanetsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CharacterPlanetsResponse.class);
    }

    /**
     * Convert an instance of CharacterPlanetsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
