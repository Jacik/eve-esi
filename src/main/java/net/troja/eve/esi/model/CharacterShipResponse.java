/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class CharacterShipResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_SHIP_ITEM_ID = "ship_item_id";
    @SerializedName(SERIALIZED_NAME_SHIP_ITEM_ID)
    @javax.annotation.Nonnull
    private Long shipItemId;

    public static final String SERIALIZED_NAME_SHIP_NAME = "ship_name";
    @SerializedName(SERIALIZED_NAME_SHIP_NAME)
    @javax.annotation.Nonnull
    private String shipName;

    public static final String SERIALIZED_NAME_SHIP_TYPE_ID = "ship_type_id";
    @SerializedName(SERIALIZED_NAME_SHIP_TYPE_ID)
    @javax.annotation.Nonnull
    private Integer shipTypeId;

    public CharacterShipResponse() {
    }

    public CharacterShipResponse shipItemId(@javax.annotation.Nonnull Long shipItemId) {
        this.shipItemId = shipItemId;
        return this;
    }

    /**
     * Item id&#39;s are unique to a ship and persist until it is repackaged.
     * This value can be used to track repeated uses of a ship, or detect when a
     * pilot changes into a different instance of the same ship type.
     * 
     * @return shipItemId
     */
    @javax.annotation.Nonnull
    public Long getShipItemId() {
        return shipItemId;
    }

    public void setShipItemId(@javax.annotation.Nonnull Long shipItemId) {
        this.shipItemId = shipItemId;
    }

    public CharacterShipResponse shipName(@javax.annotation.Nonnull String shipName) {
        this.shipName = shipName;
        return this;
    }

    /**
     * ship_name string
     * 
     * @return shipName
     */
    @javax.annotation.Nonnull
    public String getShipName() {
        return shipName;
    }

    public void setShipName(@javax.annotation.Nonnull String shipName) {
        this.shipName = shipName;
    }

    public CharacterShipResponse shipTypeId(@javax.annotation.Nonnull Integer shipTypeId) {
        this.shipTypeId = shipTypeId;
        return this;
    }

    /**
     * ship_type_id integer
     * 
     * @return shipTypeId
     */
    @javax.annotation.Nonnull
    public Integer getShipTypeId() {
        return shipTypeId;
    }

    public void setShipTypeId(@javax.annotation.Nonnull Integer shipTypeId) {
        this.shipTypeId = shipTypeId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CharacterShipResponse characterShipResponse = (CharacterShipResponse) o;
        return Objects.equals(this.shipItemId, characterShipResponse.shipItemId)
                && Objects.equals(this.shipName, characterShipResponse.shipName)
                && Objects.equals(this.shipTypeId, characterShipResponse.shipTypeId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(shipItemId, shipName, shipTypeId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CharacterShipResponse {\n");
        sb.append("    shipItemId: ").append(toIndentedString(shipItemId)).append("\n");
        sb.append("    shipName: ").append(toIndentedString(shipName)).append("\n");
        sb.append("    shipTypeId: ").append(toIndentedString(shipTypeId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("ship_item_id");
        openapiFields.add("ship_name");
        openapiFields.add("ship_type_id");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("ship_item_id");
        openapiRequiredFields.add("ship_name");
        openapiRequiredFields.add("ship_type_id");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to
     *             CharacterShipResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CharacterShipResponse.openapiRequiredFields.isEmpty()) { // has
                                                                          // required
                                                                          // fields
                                                                          // but
                                                                          // JSON
                                                                          // element
                                                                          // is
                                                                          // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in CharacterShipResponse is not found in the empty JSON string",
                        CharacterShipResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CharacterShipResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CharacterShipResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CharacterShipResponse.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("ship_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `ship_name` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("ship_name").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CharacterShipResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CharacterShipResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CharacterShipResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CharacterShipResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CharacterShipResponse>() {
                @Override
                public void write(JsonWriter out, CharacterShipResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CharacterShipResponse read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CharacterShipResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CharacterShipResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CharacterShipResponse
     */
    public static CharacterShipResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CharacterShipResponse.class);
    }

    /**
     * Convert an instance of CharacterShipResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
