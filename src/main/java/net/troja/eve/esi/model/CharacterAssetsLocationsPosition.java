/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * position object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class CharacterAssetsLocationsPosition implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_X = "x";
    @SerializedName(SERIALIZED_NAME_X)
    @javax.annotation.Nonnull
    private Double x;

    public static final String SERIALIZED_NAME_Y = "y";
    @SerializedName(SERIALIZED_NAME_Y)
    @javax.annotation.Nonnull
    private Double y;

    public static final String SERIALIZED_NAME_Z = "z";
    @SerializedName(SERIALIZED_NAME_Z)
    @javax.annotation.Nonnull
    private Double z;

    public CharacterAssetsLocationsPosition() {
    }

    public CharacterAssetsLocationsPosition x(@javax.annotation.Nonnull Double x) {
        this.x = x;
        return this;
    }

    /**
     * x number
     * 
     * @return x
     */
    @javax.annotation.Nonnull
    public Double getX() {
        return x;
    }

    public void setX(@javax.annotation.Nonnull Double x) {
        this.x = x;
    }

    public CharacterAssetsLocationsPosition y(@javax.annotation.Nonnull Double y) {
        this.y = y;
        return this;
    }

    /**
     * y number
     * 
     * @return y
     */
    @javax.annotation.Nonnull
    public Double getY() {
        return y;
    }

    public void setY(@javax.annotation.Nonnull Double y) {
        this.y = y;
    }

    public CharacterAssetsLocationsPosition z(@javax.annotation.Nonnull Double z) {
        this.z = z;
        return this;
    }

    /**
     * z number
     * 
     * @return z
     */
    @javax.annotation.Nonnull
    public Double getZ() {
        return z;
    }

    public void setZ(@javax.annotation.Nonnull Double z) {
        this.z = z;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CharacterAssetsLocationsPosition characterAssetsLocationsPosition = (CharacterAssetsLocationsPosition) o;
        return Objects.equals(this.x, characterAssetsLocationsPosition.x)
                && Objects.equals(this.y, characterAssetsLocationsPosition.y)
                && Objects.equals(this.z, characterAssetsLocationsPosition.z);
    }

    @Override
    public int hashCode() {
        return Objects.hash(x, y, z);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CharacterAssetsLocationsPosition {\n");
        sb.append("    x: ").append(toIndentedString(x)).append("\n");
        sb.append("    y: ").append(toIndentedString(y)).append("\n");
        sb.append("    z: ").append(toIndentedString(z)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("x");
        openapiFields.add("y");
        openapiFields.add("z");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("x");
        openapiRequiredFields.add("y");
        openapiRequiredFields.add("z");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to
     *             CharacterAssetsLocationsPosition
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CharacterAssetsLocationsPosition.openapiRequiredFields.isEmpty()) { // has
                                                                                     // required
                                                                                     // fields
                                                                                     // but
                                                                                     // JSON
                                                                                     // element
                                                                                     // is
                                                                                     // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CharacterAssetsLocationsPosition is not found in the empty JSON string",
                                CharacterAssetsLocationsPosition.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CharacterAssetsLocationsPosition.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CharacterAssetsLocationsPosition` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CharacterAssetsLocationsPosition.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CharacterAssetsLocationsPosition.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CharacterAssetsLocationsPosition' and its
                             // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CharacterAssetsLocationsPosition> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CharacterAssetsLocationsPosition.class));

            return (TypeAdapter<T>) new TypeAdapter<CharacterAssetsLocationsPosition>() {
                @Override
                public void write(JsonWriter out, CharacterAssetsLocationsPosition value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CharacterAssetsLocationsPosition read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CharacterAssetsLocationsPosition given an JSON
     * string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CharacterAssetsLocationsPosition
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CharacterAssetsLocationsPosition
     */
    public static CharacterAssetsLocationsPosition fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CharacterAssetsLocationsPosition.class);
    }

    /**
     * Convert an instance of CharacterAssetsLocationsPosition to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
