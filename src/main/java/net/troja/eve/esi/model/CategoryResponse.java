/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class CategoryResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
    @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
    @javax.annotation.Nonnull
    private Integer categoryId;

    public static final String SERIALIZED_NAME_GROUPS = "groups";
    @SerializedName(SERIALIZED_NAME_GROUPS)
    @javax.annotation.Nonnull
    private List<Integer> groups;

    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    @javax.annotation.Nonnull
    private String name;

    public static final String SERIALIZED_NAME_PUBLISHED = "published";
    @SerializedName(SERIALIZED_NAME_PUBLISHED)
    @javax.annotation.Nonnull
    private Boolean published;

    public CategoryResponse() {
    }

    public CategoryResponse categoryId(@javax.annotation.Nonnull Integer categoryId) {
        this.categoryId = categoryId;
        return this;
    }

    /**
     * category_id integer
     * 
     * @return categoryId
     */
    @javax.annotation.Nonnull
    public Integer getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(@javax.annotation.Nonnull Integer categoryId) {
        this.categoryId = categoryId;
    }

    public CategoryResponse groups(@javax.annotation.Nonnull List<Integer> groups) {
        this.groups = groups;
        return this;
    }

    public CategoryResponse addGroupsItem(Integer groupsItem) {
        if (this.groups == null) {
            this.groups = new ArrayList<>();
        }

        this.groups.add(groupsItem);
        return this;
    }

    /**
     * groups array
     * 
     * @return groups
     */
    @javax.annotation.Nonnull
    public List<Integer> getGroups() {
        return groups;
    }

    public void setGroups(@javax.annotation.Nonnull List<Integer> groups) {
        this.groups = groups;
    }

    public CategoryResponse name(@javax.annotation.Nonnull String name) {
        this.name = name;
        return this;
    }

    /**
     * name string
     * 
     * @return name
     */
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(@javax.annotation.Nonnull String name) {
        this.name = name;
    }

    public CategoryResponse published(@javax.annotation.Nonnull Boolean published) {
        this.published = published;
        return this;
    }

    /**
     * published boolean
     * 
     * @return published
     */
    @javax.annotation.Nonnull
    public Boolean getPublished() {
        return published;
    }

    public void setPublished(@javax.annotation.Nonnull Boolean published) {
        this.published = published;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CategoryResponse categoryResponse = (CategoryResponse) o;
        return Objects.equals(this.categoryId, categoryResponse.categoryId)
                && Objects.equals(this.groups, categoryResponse.groups)
                && Objects.equals(this.name, categoryResponse.name)
                && Objects.equals(this.published, categoryResponse.published);
    }

    @Override
    public int hashCode() {
        return Objects.hash(categoryId, groups, name, published);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CategoryResponse {\n");
        sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
        sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    published: ").append(toIndentedString(published)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("category_id");
        openapiFields.add("groups");
        openapiFields.add("name");
        openapiFields.add("published");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("category_id");
        openapiRequiredFields.add("groups");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("published");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to
     *             CategoryResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CategoryResponse.openapiRequiredFields.isEmpty()) { // has
                                                                     // required
                                                                     // fields
                                                                     // but JSON
                                                                     // element
                                                                     // is null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in CategoryResponse is not found in the empty JSON string",
                        CategoryResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CategoryResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CategoryResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CategoryResponse.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the required json array is present
        if (jsonObj.get("groups") == null) {
            throw new IllegalArgumentException(
                    "Expected the field `linkedContent` to be an array in the JSON string but got `null`");
        } else if (!jsonObj.get("groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups")
                            .toString()));
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `name` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("name").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CategoryResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CategoryResponse'
                             // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CategoryResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CategoryResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CategoryResponse>() {
                @Override
                public void write(JsonWriter out, CategoryResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CategoryResponse read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CategoryResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CategoryResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CategoryResponse
     */
    public static CategoryResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CategoryResponse.class);
    }

    /**
     * Convert an instance of CategoryResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
