/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import net.troja.eve.esi.model.KillmailSubItem;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * item object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class KillmailItem implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_FLAG = "flag";
    @SerializedName(SERIALIZED_NAME_FLAG)
    @javax.annotation.Nonnull
    private Integer flag;

    public static final String SERIALIZED_NAME_ITEM_TYPE_ID = "item_type_id";
    @SerializedName(SERIALIZED_NAME_ITEM_TYPE_ID)
    @javax.annotation.Nonnull
    private Integer itemTypeId;

    public static final String SERIALIZED_NAME_ITEMS = "items";
    @SerializedName(SERIALIZED_NAME_ITEMS)
    @javax.annotation.Nullable
    private List<KillmailSubItem> items;

    public static final String SERIALIZED_NAME_QUANTITY_DESTROYED = "quantity_destroyed";
    @SerializedName(SERIALIZED_NAME_QUANTITY_DESTROYED)
    @javax.annotation.Nullable
    private Long quantityDestroyed;

    public static final String SERIALIZED_NAME_QUANTITY_DROPPED = "quantity_dropped";
    @SerializedName(SERIALIZED_NAME_QUANTITY_DROPPED)
    @javax.annotation.Nullable
    private Long quantityDropped;

    public static final String SERIALIZED_NAME_SINGLETON = "singleton";
    @SerializedName(SERIALIZED_NAME_SINGLETON)
    @javax.annotation.Nonnull
    private Integer singleton;

    public KillmailItem() {
    }

    public KillmailItem flag(@javax.annotation.Nonnull Integer flag) {
        this.flag = flag;
        return this;
    }

    /**
     * Flag for the location of the item
     * 
     * @return flag
     */
    @javax.annotation.Nonnull
    public Integer getFlag() {
        return flag;
    }

    public void setFlag(@javax.annotation.Nonnull Integer flag) {
        this.flag = flag;
    }

    public KillmailItem itemTypeId(@javax.annotation.Nonnull Integer itemTypeId) {
        this.itemTypeId = itemTypeId;
        return this;
    }

    /**
     * item_type_id integer
     * 
     * @return itemTypeId
     */
    @javax.annotation.Nonnull
    public Integer getItemTypeId() {
        return itemTypeId;
    }

    public void setItemTypeId(@javax.annotation.Nonnull Integer itemTypeId) {
        this.itemTypeId = itemTypeId;
    }

    public KillmailItem items(@javax.annotation.Nullable List<KillmailSubItem> items) {
        this.items = items;
        return this;
    }

    public KillmailItem addItemsItem(KillmailSubItem itemsItem) {
        if (this.items == null) {
            this.items = new ArrayList<>();
        }

        this.items.add(itemsItem);
        return this;
    }

    /**
     * items array
     * 
     * @return items
     */
    @javax.annotation.Nullable
    public List<KillmailSubItem> getItems() {
        return items;
    }

    public void setItems(@javax.annotation.Nullable List<KillmailSubItem> items) {
        this.items = items;
    }

    public KillmailItem quantityDestroyed(@javax.annotation.Nullable Long quantityDestroyed) {
        this.quantityDestroyed = quantityDestroyed;
        return this;
    }

    /**
     * How many of the item were destroyed if any
     * 
     * @return quantityDestroyed
     */
    @javax.annotation.Nullable
    public Long getQuantityDestroyed() {
        return quantityDestroyed;
    }

    public void setQuantityDestroyed(@javax.annotation.Nullable Long quantityDestroyed) {
        this.quantityDestroyed = quantityDestroyed;
    }

    public KillmailItem quantityDropped(@javax.annotation.Nullable Long quantityDropped) {
        this.quantityDropped = quantityDropped;
        return this;
    }

    /**
     * How many of the item were dropped if any
     * 
     * @return quantityDropped
     */
    @javax.annotation.Nullable
    public Long getQuantityDropped() {
        return quantityDropped;
    }

    public void setQuantityDropped(@javax.annotation.Nullable Long quantityDropped) {
        this.quantityDropped = quantityDropped;
    }

    public KillmailItem singleton(@javax.annotation.Nonnull Integer singleton) {
        this.singleton = singleton;
        return this;
    }

    /**
     * singleton integer
     * 
     * @return singleton
     */
    @javax.annotation.Nonnull
    public Integer getSingleton() {
        return singleton;
    }

    public void setSingleton(@javax.annotation.Nonnull Integer singleton) {
        this.singleton = singleton;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        KillmailItem killmailItem = (KillmailItem) o;
        return Objects.equals(this.flag, killmailItem.flag) && Objects.equals(this.itemTypeId, killmailItem.itemTypeId)
                && Objects.equals(this.items, killmailItem.items)
                && Objects.equals(this.quantityDestroyed, killmailItem.quantityDestroyed)
                && Objects.equals(this.quantityDropped, killmailItem.quantityDropped)
                && Objects.equals(this.singleton, killmailItem.singleton);
    }

    @Override
    public int hashCode() {
        return Objects.hash(flag, itemTypeId, items, quantityDestroyed, quantityDropped, singleton);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class KillmailItem {\n");
        sb.append("    flag: ").append(toIndentedString(flag)).append("\n");
        sb.append("    itemTypeId: ").append(toIndentedString(itemTypeId)).append("\n");
        sb.append("    items: ").append(toIndentedString(items)).append("\n");
        sb.append("    quantityDestroyed: ").append(toIndentedString(quantityDestroyed)).append("\n");
        sb.append("    quantityDropped: ").append(toIndentedString(quantityDropped)).append("\n");
        sb.append("    singleton: ").append(toIndentedString(singleton)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("flag");
        openapiFields.add("item_type_id");
        openapiFields.add("items");
        openapiFields.add("quantity_destroyed");
        openapiFields.add("quantity_dropped");
        openapiFields.add("singleton");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("flag");
        openapiRequiredFields.add("item_type_id");
        openapiRequiredFields.add("singleton");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to KillmailItem
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!KillmailItem.openapiRequiredFields.isEmpty()) { // has required
                                                                 // fields but
                                                                 // JSON element
                                                                 // is null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in KillmailItem is not found in the empty JSON string",
                        KillmailItem.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!KillmailItem.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format(
                        "The field `%s` in the JSON string is not defined in the `KillmailItem` properties. JSON: %s",
                        entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : KillmailItem.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
            JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
            if (jsonArrayitems != null) {
                // ensure the json data is an array
                if (!jsonObj.get("items").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `items` to be an array in the JSON string but got `%s`",
                            jsonObj.get("items").toString()));
                }

                // validate the optional field `items` (array)
                for (int i = 0; i < jsonArrayitems.size(); i++) {
                    KillmailSubItem.validateJsonElement(jsonArrayitems.get(i));
                };
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!KillmailItem.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'KillmailItem' and
                             // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<KillmailItem> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(KillmailItem.class));

            return (TypeAdapter<T>) new TypeAdapter<KillmailItem>() {
                @Override
                public void write(JsonWriter out, KillmailItem value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public KillmailItem read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of KillmailItem given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of KillmailItem
     * @throws IOException
     *             if the JSON string is invalid with respect to KillmailItem
     */
    public static KillmailItem fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, KillmailItem.class);
    }

    /**
     * Convert an instance of KillmailItem to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
