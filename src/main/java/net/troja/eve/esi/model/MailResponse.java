/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import net.troja.eve.esi.model.Recipient;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class MailResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_BODY = "body";
    @SerializedName(SERIALIZED_NAME_BODY)
    @javax.annotation.Nullable
    private String body;

    public static final String SERIALIZED_NAME_FROM = "from";
    @SerializedName(SERIALIZED_NAME_FROM)
    @javax.annotation.Nullable
    private Integer from;

    public static final String SERIALIZED_NAME_LABELS = "labels";
    @SerializedName(SERIALIZED_NAME_LABELS)
    @javax.annotation.Nullable
    private List<Integer> labels = new ArrayList<>();

    public static final String SERIALIZED_NAME_READ = "read";
    @SerializedName(SERIALIZED_NAME_READ)
    @javax.annotation.Nullable
    private Boolean read;

    public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
    @SerializedName(SERIALIZED_NAME_RECIPIENTS)
    @javax.annotation.Nullable
    private Set<Recipient> recipients = new LinkedHashSet<>();

    public static final String SERIALIZED_NAME_SUBJECT = "subject";
    @SerializedName(SERIALIZED_NAME_SUBJECT)
    @javax.annotation.Nullable
    private String subject;

    public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
    @SerializedName(SERIALIZED_NAME_TIMESTAMP)
    @javax.annotation.Nullable
    private OffsetDateTime timestamp;

    public MailResponse() {
    }

    public MailResponse body(@javax.annotation.Nullable String body) {
        this.body = body;
        return this;
    }

    /**
     * Mail&#39;s body
     * 
     * @return body
     */
    @javax.annotation.Nullable
    public String getBody() {
        return body;
    }

    public void setBody(@javax.annotation.Nullable String body) {
        this.body = body;
    }

    public MailResponse from(@javax.annotation.Nullable Integer from) {
        this.from = from;
        return this;
    }

    /**
     * From whom the mail was sent
     * 
     * @return from
     */
    @javax.annotation.Nullable
    public Integer getFrom() {
        return from;
    }

    public void setFrom(@javax.annotation.Nullable Integer from) {
        this.from = from;
    }

    public MailResponse labels(@javax.annotation.Nullable List<Integer> labels) {
        this.labels = labels;
        return this;
    }

    public MailResponse addLabelsItem(Integer labelsItem) {
        if (this.labels == null) {
            this.labels = new ArrayList<>();
        }

        this.labels.add(labelsItem);
        return this;
    }

    /**
     * Labels attached to the mail
     * 
     * @return labels
     */
    @javax.annotation.Nullable
    public List<Integer> getLabels() {
        return labels;
    }

    public void setLabels(@javax.annotation.Nullable List<Integer> labels) {
        this.labels = labels;
    }

    public MailResponse read(@javax.annotation.Nullable Boolean read) {
        this.read = read;
        return this;
    }

    /**
     * Whether the mail is flagged as read
     * 
     * @return read
     */
    @javax.annotation.Nullable
    public Boolean getRead() {
        return read;
    }

    public void setRead(@javax.annotation.Nullable Boolean read) {
        this.read = read;
    }

    public MailResponse recipients(@javax.annotation.Nullable Set<Recipient> recipients) {
        this.recipients = recipients;
        return this;
    }

    public MailResponse addRecipientsItem(Recipient recipientsItem) {
        if (this.recipients == null) {
            this.recipients = new LinkedHashSet<>();
        }

        this.recipients.add(recipientsItem);
        return this;
    }

    /**
     * Recipients of the mail
     * 
     * @return recipients
     */
    @javax.annotation.Nullable
    public Set<Recipient> getRecipients() {
        return recipients;
    }

    public void setRecipients(@javax.annotation.Nullable Set<Recipient> recipients) {
        this.recipients = recipients;
    }

    public MailResponse subject(@javax.annotation.Nullable String subject) {
        this.subject = subject;
        return this;
    }

    /**
     * Mail subject
     * 
     * @return subject
     */
    @javax.annotation.Nullable
    public String getSubject() {
        return subject;
    }

    public void setSubject(@javax.annotation.Nullable String subject) {
        this.subject = subject;
    }

    public MailResponse timestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * When the mail was sent
     * 
     * @return timestamp
     */
    @javax.annotation.Nullable
    public OffsetDateTime getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
        this.timestamp = timestamp;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MailResponse mailResponse = (MailResponse) o;
        return Objects.equals(this.body, mailResponse.body) && Objects.equals(this.from, mailResponse.from)
                && Objects.equals(this.labels, mailResponse.labels) && Objects.equals(this.read, mailResponse.read)
                && Objects.equals(this.recipients, mailResponse.recipients)
                && Objects.equals(this.subject, mailResponse.subject)
                && Objects.equals(this.timestamp, mailResponse.timestamp);
    }

    @Override
    public int hashCode() {
        return Objects.hash(body, from, labels, read, recipients, subject, timestamp);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MailResponse {\n");
        sb.append("    body: ").append(toIndentedString(body)).append("\n");
        sb.append("    from: ").append(toIndentedString(from)).append("\n");
        sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
        sb.append("    read: ").append(toIndentedString(read)).append("\n");
        sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
        sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
        sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("body");
        openapiFields.add("from");
        openapiFields.add("labels");
        openapiFields.add("read");
        openapiFields.add("recipients");
        openapiFields.add("subject");
        openapiFields.add("timestamp");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to MailResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!MailResponse.openapiRequiredFields.isEmpty()) { // has required
                                                                 // fields but
                                                                 // JSON element
                                                                 // is null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in MailResponse is not found in the empty JSON string",
                        MailResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!MailResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format(
                        "The field `%s` in the JSON string is not defined in the `MailResponse` properties. JSON: %s",
                        entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull())
                && !jsonObj.get("body").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `body` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("body").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()
                && !jsonObj.get("labels").isJsonArray()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels")
                            .toString()));
        }
        if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
            JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
            if (jsonArrayrecipients != null) {
                // ensure the json data is an array
                if (!jsonObj.get("recipients").isJsonArray()) {
                    throw new IllegalArgumentException(String.format(
                            "Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj
                                    .get("recipients").toString()));
                }

                // validate the optional field `recipients` (array)
                for (int i = 0; i < jsonArrayrecipients.size(); i++) {
                    Recipient.validateJsonElement(jsonArrayrecipients.get(i));
                };
            }
        }
        if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull())
                && !jsonObj.get("subject").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `subject` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("subject").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MailResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MailResponse' and
                             // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MailResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(MailResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<MailResponse>() {
                @Override
                public void write(JsonWriter out, MailResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public MailResponse read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of MailResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of MailResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to MailResponse
     */
    public static MailResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MailResponse.class);
    }

    /**
     * Convert an instance of MailResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
