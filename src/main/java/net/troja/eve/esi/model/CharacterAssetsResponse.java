/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class CharacterAssetsResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_IS_BLUEPRINT_COPY = "is_blueprint_copy";
    @SerializedName(SERIALIZED_NAME_IS_BLUEPRINT_COPY)
    @javax.annotation.Nullable
    private Boolean isBlueprintCopy;

    public static final String SERIALIZED_NAME_IS_SINGLETON = "is_singleton";
    @SerializedName(SERIALIZED_NAME_IS_SINGLETON)
    @javax.annotation.Nonnull
    private Boolean isSingleton;

    public static final String SERIALIZED_NAME_ITEM_ID = "item_id";
    @SerializedName(SERIALIZED_NAME_ITEM_ID)
    @javax.annotation.Nonnull
    private Long itemId;

    /**
     * location_flag string
     */
    @JsonAdapter(LocationFlagEnum.Adapter.class)
    public enum LocationFlagEnum {
        ASSETSAFETY("AssetSafety"),

        AUTOFIT("AutoFit"),

        BOOSTERBAY("BoosterBay"),

        CARGO("Cargo"),

        CORPORATIONGOALDELIVERIES("CorporationGoalDeliveries"),

        CORPSEBAY("CorpseBay"),

        DELIVERIES("Deliveries"),

        DRONEBAY("DroneBay"),

        FIGHTERBAY("FighterBay"),

        FIGHTERTUBE0("FighterTube0"),

        FIGHTERTUBE1("FighterTube1"),

        FIGHTERTUBE2("FighterTube2"),

        FIGHTERTUBE3("FighterTube3"),

        FIGHTERTUBE4("FighterTube4"),

        FLEETHANGAR("FleetHangar"),

        FRIGATEESCAPEBAY("FrigateEscapeBay"),

        HANGAR("Hangar"),

        HANGARALL("HangarAll"),

        HISLOT0("HiSlot0"),

        HISLOT1("HiSlot1"),

        HISLOT2("HiSlot2"),

        HISLOT3("HiSlot3"),

        HISLOT4("HiSlot4"),

        HISLOT5("HiSlot5"),

        HISLOT6("HiSlot6"),

        HISLOT7("HiSlot7"),

        HIDDENMODIFIERS("HiddenModifiers"),

        IMPLANT("Implant"),

        INFRASTRUCTUREHANGAR("InfrastructureHangar"),

        LOSLOT0("LoSlot0"),

        LOSLOT1("LoSlot1"),

        LOSLOT2("LoSlot2"),

        LOSLOT3("LoSlot3"),

        LOSLOT4("LoSlot4"),

        LOSLOT5("LoSlot5"),

        LOSLOT6("LoSlot6"),

        LOSLOT7("LoSlot7"),

        LOCKED("Locked"),

        MEDSLOT0("MedSlot0"),

        MEDSLOT1("MedSlot1"),

        MEDSLOT2("MedSlot2"),

        MEDSLOT3("MedSlot3"),

        MEDSLOT4("MedSlot4"),

        MEDSLOT5("MedSlot5"),

        MEDSLOT6("MedSlot6"),

        MEDSLOT7("MedSlot7"),

        MOBILEDEPOTHOLD("MobileDepotHold"),

        MOONMATERIALBAY("MoonMaterialBay"),

        QUAFEBAY("QuafeBay"),

        RIGSLOT0("RigSlot0"),

        RIGSLOT1("RigSlot1"),

        RIGSLOT2("RigSlot2"),

        RIGSLOT3("RigSlot3"),

        RIGSLOT4("RigSlot4"),

        RIGSLOT5("RigSlot5"),

        RIGSLOT6("RigSlot6"),

        RIGSLOT7("RigSlot7"),

        SHIPHANGAR("ShipHangar"),

        SKILL("Skill"),

        SPECIALIZEDAMMOHOLD("SpecializedAmmoHold"),

        SPECIALIZEDASTEROIDHOLD("SpecializedAsteroidHold"),

        SPECIALIZEDCOMMANDCENTERHOLD("SpecializedCommandCenterHold"),

        SPECIALIZEDFUELBAY("SpecializedFuelBay"),

        SPECIALIZEDGASHOLD("SpecializedGasHold"),

        SPECIALIZEDICEHOLD("SpecializedIceHold"),

        SPECIALIZEDINDUSTRIALSHIPHOLD("SpecializedIndustrialShipHold"),

        SPECIALIZEDLARGESHIPHOLD("SpecializedLargeShipHold"),

        SPECIALIZEDMATERIALBAY("SpecializedMaterialBay"),

        SPECIALIZEDMEDIUMSHIPHOLD("SpecializedMediumShipHold"),

        SPECIALIZEDMINERALHOLD("SpecializedMineralHold"),

        SPECIALIZEDOREHOLD("SpecializedOreHold"),

        SPECIALIZEDPLANETARYCOMMODITIESHOLD("SpecializedPlanetaryCommoditiesHold"),

        SPECIALIZEDSALVAGEHOLD("SpecializedSalvageHold"),

        SPECIALIZEDSHIPHOLD("SpecializedShipHold"),

        SPECIALIZEDSMALLSHIPHOLD("SpecializedSmallShipHold"),

        STRUCTUREDEEDBAY("StructureDeedBay"),

        SUBSYSTEMBAY("SubSystemBay"),

        SUBSYSTEMSLOT0("SubSystemSlot0"),

        SUBSYSTEMSLOT1("SubSystemSlot1"),

        SUBSYSTEMSLOT2("SubSystemSlot2"),

        SUBSYSTEMSLOT3("SubSystemSlot3"),

        SUBSYSTEMSLOT4("SubSystemSlot4"),

        SUBSYSTEMSLOT5("SubSystemSlot5"),

        SUBSYSTEMSLOT6("SubSystemSlot6"),

        SUBSYSTEMSLOT7("SubSystemSlot7"),

        UNLOCKED("Unlocked"),

        WARDROBE("Wardrobe");

        private String value;

        LocationFlagEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static LocationFlagEnum fromValue(String value) {
            for (LocationFlagEnum b : LocationFlagEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<LocationFlagEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final LocationFlagEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public LocationFlagEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return LocationFlagEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            LocationFlagEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_LOCATION_FLAG = "location_flag";
    @SerializedName(SERIALIZED_NAME_LOCATION_FLAG)
    @javax.annotation.Nonnull
    private String locationFlag;
    private LocationFlagEnum locationFlagEnum;

    public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
    @SerializedName(SERIALIZED_NAME_LOCATION_ID)
    @javax.annotation.Nonnull
    private Long locationId;

    /**
     * location_type string
     */
    @JsonAdapter(LocationTypeEnum.Adapter.class)
    public enum LocationTypeEnum {
        STATION("station"),

        SOLAR_SYSTEM("solar_system"),

        ITEM("item"),

        OTHER("other");

        private String value;

        LocationTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static LocationTypeEnum fromValue(String value) {
            for (LocationTypeEnum b : LocationTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<LocationTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final LocationTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public LocationTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return LocationTypeEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            LocationTypeEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_LOCATION_TYPE = "location_type";
    @SerializedName(SERIALIZED_NAME_LOCATION_TYPE)
    @javax.annotation.Nonnull
    private String locationType;
    private LocationTypeEnum locationTypeEnum;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";
    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @javax.annotation.Nonnull
    private Integer quantity;

    public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
    @SerializedName(SERIALIZED_NAME_TYPE_ID)
    @javax.annotation.Nonnull
    private Integer typeId;

    public CharacterAssetsResponse() {
    }

    public CharacterAssetsResponse isBlueprintCopy(@javax.annotation.Nullable Boolean isBlueprintCopy) {
        this.isBlueprintCopy = isBlueprintCopy;
        return this;
    }

    /**
     * is_blueprint_copy boolean
     * 
     * @return isBlueprintCopy
     */
    @javax.annotation.Nullable
    public Boolean getIsBlueprintCopy() {
        return isBlueprintCopy;
    }

    public void setIsBlueprintCopy(@javax.annotation.Nullable Boolean isBlueprintCopy) {
        this.isBlueprintCopy = isBlueprintCopy;
    }

    public CharacterAssetsResponse isSingleton(@javax.annotation.Nonnull Boolean isSingleton) {
        this.isSingleton = isSingleton;
        return this;
    }

    /**
     * is_singleton boolean
     * 
     * @return isSingleton
     */
    @javax.annotation.Nonnull
    public Boolean getIsSingleton() {
        return isSingleton;
    }

    public void setIsSingleton(@javax.annotation.Nonnull Boolean isSingleton) {
        this.isSingleton = isSingleton;
    }

    public CharacterAssetsResponse itemId(@javax.annotation.Nonnull Long itemId) {
        this.itemId = itemId;
        return this;
    }

    /**
     * item_id integer
     * 
     * @return itemId
     */
    @javax.annotation.Nonnull
    public Long getItemId() {
        return itemId;
    }

    public void setItemId(@javax.annotation.Nonnull Long itemId) {
        this.itemId = itemId;
    }

    public CharacterAssetsResponse locationFlag(@javax.annotation.Nonnull LocationFlagEnum locationFlag) {
        this.locationFlagEnum = locationFlag;
        return this;
    }

    public CharacterAssetsResponse locationFlagString(@javax.annotation.Nonnull String locationFlag) {
        this.locationFlag = locationFlag;
        return this;
    }

    /**
     * location_flag string
     * 
     * @return locationFlag
     */

    public LocationFlagEnum getLocationFlag() {
        if (locationFlagEnum == null) {
            locationFlagEnum = LocationFlagEnum.fromValue(locationFlag);
        }
        return locationFlagEnum;
    }

    public String getLocationFlagString() {
        return locationFlag;
    }

    public void setLocationFlag(@javax.annotation.Nonnull LocationFlagEnum locationFlag) {
        this.locationFlagEnum = locationFlag;
    }

    public void setLocationFlagString(@javax.annotation.Nonnull String locationFlag) {
        this.locationFlag = locationFlag;
    }

    public CharacterAssetsResponse locationId(@javax.annotation.Nonnull Long locationId) {
        this.locationId = locationId;
        return this;
    }

    /**
     * location_id integer
     * 
     * @return locationId
     */
    @javax.annotation.Nonnull
    public Long getLocationId() {
        return locationId;
    }

    public void setLocationId(@javax.annotation.Nonnull Long locationId) {
        this.locationId = locationId;
    }

    public CharacterAssetsResponse locationType(@javax.annotation.Nonnull LocationTypeEnum locationType) {
        this.locationTypeEnum = locationType;
        return this;
    }

    public CharacterAssetsResponse locationTypeString(@javax.annotation.Nonnull String locationType) {
        this.locationType = locationType;
        return this;
    }

    /**
     * location_type string
     * 
     * @return locationType
     */

    public LocationTypeEnum getLocationType() {
        if (locationTypeEnum == null) {
            locationTypeEnum = LocationTypeEnum.fromValue(locationType);
        }
        return locationTypeEnum;
    }

    public String getLocationTypeString() {
        return locationType;
    }

    public void setLocationType(@javax.annotation.Nonnull LocationTypeEnum locationType) {
        this.locationTypeEnum = locationType;
    }

    public void setLocationTypeString(@javax.annotation.Nonnull String locationType) {
        this.locationType = locationType;
    }

    public CharacterAssetsResponse quantity(@javax.annotation.Nonnull Integer quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * quantity integer
     * 
     * @return quantity
     */
    @javax.annotation.Nonnull
    public Integer getQuantity() {
        return quantity;
    }

    public void setQuantity(@javax.annotation.Nonnull Integer quantity) {
        this.quantity = quantity;
    }

    public CharacterAssetsResponse typeId(@javax.annotation.Nonnull Integer typeId) {
        this.typeId = typeId;
        return this;
    }

    /**
     * type_id integer
     * 
     * @return typeId
     */
    @javax.annotation.Nonnull
    public Integer getTypeId() {
        return typeId;
    }

    public void setTypeId(@javax.annotation.Nonnull Integer typeId) {
        this.typeId = typeId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CharacterAssetsResponse characterAssetsResponse = (CharacterAssetsResponse) o;
        return Objects.equals(this.isBlueprintCopy, characterAssetsResponse.isBlueprintCopy)
                && Objects.equals(this.isSingleton, characterAssetsResponse.isSingleton)
                && Objects.equals(this.itemId, characterAssetsResponse.itemId)
                && Objects.equals(this.locationFlag, characterAssetsResponse.locationFlag)
                && Objects.equals(this.locationId, characterAssetsResponse.locationId)
                && Objects.equals(this.locationType, characterAssetsResponse.locationType)
                && Objects.equals(this.quantity, characterAssetsResponse.quantity)
                && Objects.equals(this.typeId, characterAssetsResponse.typeId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(isBlueprintCopy, isSingleton, itemId, locationFlag, locationId, locationType, quantity,
                typeId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CharacterAssetsResponse {\n");
        sb.append("    isBlueprintCopy: ").append(toIndentedString(isBlueprintCopy)).append("\n");
        sb.append("    isSingleton: ").append(toIndentedString(isSingleton)).append("\n");
        sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
        sb.append("    locationFlag: ").append(toIndentedString(locationFlag)).append("\n");
        sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
        sb.append("    locationType: ").append(toIndentedString(locationType)).append("\n");
        sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("is_blueprint_copy");
        openapiFields.add("is_singleton");
        openapiFields.add("item_id");
        openapiFields.add("location_flag");
        openapiFields.add("location_id");
        openapiFields.add("location_type");
        openapiFields.add("quantity");
        openapiFields.add("type_id");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("is_singleton");
        openapiRequiredFields.add("item_id");
        openapiRequiredFields.add("location_flag");
        openapiRequiredFields.add("location_id");
        openapiRequiredFields.add("location_type");
        openapiRequiredFields.add("quantity");
        openapiRequiredFields.add("type_id");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to
     *             CharacterAssetsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CharacterAssetsResponse.openapiRequiredFields.isEmpty()) { // has
                                                                            // required
                                                                            // fields
                                                                            // but
                                                                            // JSON
                                                                            // element
                                                                            // is
                                                                            // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in CharacterAssetsResponse is not found in the empty JSON string",
                        CharacterAssetsResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CharacterAssetsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CharacterAssetsResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CharacterAssetsResponse.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("location_flag").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `location_flag` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("location_flag").toString()));
        }
        // validate the required field `location_flag`
        LocationFlagEnum.validateJsonElement(jsonObj.get("location_flag"));
        if (!jsonObj.get("location_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `location_type` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("location_type").toString()));
        }
        // validate the required field `location_type`
        LocationTypeEnum.validateJsonElement(jsonObj.get("location_type"));
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CharacterAssetsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CharacterAssetsResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CharacterAssetsResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CharacterAssetsResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CharacterAssetsResponse>() {
                @Override
                public void write(JsonWriter out, CharacterAssetsResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CharacterAssetsResponse read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CharacterAssetsResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CharacterAssetsResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CharacterAssetsResponse
     */
    public static CharacterAssetsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CharacterAssetsResponse.class);
    }

    /**
     * Convert an instance of CharacterAssetsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
