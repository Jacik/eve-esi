/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * wallet transaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class CharacterWalletTransactionsResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
    @SerializedName(SERIALIZED_NAME_CLIENT_ID)
    @javax.annotation.Nonnull
    private Integer clientId;

    public static final String SERIALIZED_NAME_DATE = "date";
    @SerializedName(SERIALIZED_NAME_DATE)
    @javax.annotation.Nonnull
    private OffsetDateTime date;

    public static final String SERIALIZED_NAME_IS_BUY = "is_buy";
    @SerializedName(SERIALIZED_NAME_IS_BUY)
    @javax.annotation.Nonnull
    private Boolean isBuy;

    public static final String SERIALIZED_NAME_IS_PERSONAL = "is_personal";
    @SerializedName(SERIALIZED_NAME_IS_PERSONAL)
    @javax.annotation.Nonnull
    private Boolean isPersonal;

    public static final String SERIALIZED_NAME_JOURNAL_REF_ID = "journal_ref_id";
    @SerializedName(SERIALIZED_NAME_JOURNAL_REF_ID)
    @javax.annotation.Nonnull
    private Long journalRefId;

    public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
    @SerializedName(SERIALIZED_NAME_LOCATION_ID)
    @javax.annotation.Nonnull
    private Long locationId;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";
    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @javax.annotation.Nonnull
    private Integer quantity;

    public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
    @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
    @javax.annotation.Nonnull
    private Long transactionId;

    public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
    @SerializedName(SERIALIZED_NAME_TYPE_ID)
    @javax.annotation.Nonnull
    private Integer typeId;

    public static final String SERIALIZED_NAME_UNIT_PRICE = "unit_price";
    @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
    @javax.annotation.Nonnull
    private Double unitPrice;

    public CharacterWalletTransactionsResponse() {
    }

    public CharacterWalletTransactionsResponse clientId(@javax.annotation.Nonnull Integer clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * client_id integer
     * 
     * @return clientId
     */
    @javax.annotation.Nonnull
    public Integer getClientId() {
        return clientId;
    }

    public void setClientId(@javax.annotation.Nonnull Integer clientId) {
        this.clientId = clientId;
    }

    public CharacterWalletTransactionsResponse date(@javax.annotation.Nonnull OffsetDateTime date) {
        this.date = date;
        return this;
    }

    /**
     * Date and time of transaction
     * 
     * @return date
     */
    @javax.annotation.Nonnull
    public OffsetDateTime getDate() {
        return date;
    }

    public void setDate(@javax.annotation.Nonnull OffsetDateTime date) {
        this.date = date;
    }

    public CharacterWalletTransactionsResponse isBuy(@javax.annotation.Nonnull Boolean isBuy) {
        this.isBuy = isBuy;
        return this;
    }

    /**
     * is_buy boolean
     * 
     * @return isBuy
     */
    @javax.annotation.Nonnull
    public Boolean getIsBuy() {
        return isBuy;
    }

    public void setIsBuy(@javax.annotation.Nonnull Boolean isBuy) {
        this.isBuy = isBuy;
    }

    public CharacterWalletTransactionsResponse isPersonal(@javax.annotation.Nonnull Boolean isPersonal) {
        this.isPersonal = isPersonal;
        return this;
    }

    /**
     * is_personal boolean
     * 
     * @return isPersonal
     */
    @javax.annotation.Nonnull
    public Boolean getIsPersonal() {
        return isPersonal;
    }

    public void setIsPersonal(@javax.annotation.Nonnull Boolean isPersonal) {
        this.isPersonal = isPersonal;
    }

    public CharacterWalletTransactionsResponse journalRefId(@javax.annotation.Nonnull Long journalRefId) {
        this.journalRefId = journalRefId;
        return this;
    }

    /**
     * journal_ref_id integer
     * 
     * @return journalRefId
     */
    @javax.annotation.Nonnull
    public Long getJournalRefId() {
        return journalRefId;
    }

    public void setJournalRefId(@javax.annotation.Nonnull Long journalRefId) {
        this.journalRefId = journalRefId;
    }

    public CharacterWalletTransactionsResponse locationId(@javax.annotation.Nonnull Long locationId) {
        this.locationId = locationId;
        return this;
    }

    /**
     * location_id integer
     * 
     * @return locationId
     */
    @javax.annotation.Nonnull
    public Long getLocationId() {
        return locationId;
    }

    public void setLocationId(@javax.annotation.Nonnull Long locationId) {
        this.locationId = locationId;
    }

    public CharacterWalletTransactionsResponse quantity(@javax.annotation.Nonnull Integer quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * quantity integer
     * 
     * @return quantity
     */
    @javax.annotation.Nonnull
    public Integer getQuantity() {
        return quantity;
    }

    public void setQuantity(@javax.annotation.Nonnull Integer quantity) {
        this.quantity = quantity;
    }

    public CharacterWalletTransactionsResponse transactionId(@javax.annotation.Nonnull Long transactionId) {
        this.transactionId = transactionId;
        return this;
    }

    /**
     * Unique transaction ID
     * 
     * @return transactionId
     */
    @javax.annotation.Nonnull
    public Long getTransactionId() {
        return transactionId;
    }

    public void setTransactionId(@javax.annotation.Nonnull Long transactionId) {
        this.transactionId = transactionId;
    }

    public CharacterWalletTransactionsResponse typeId(@javax.annotation.Nonnull Integer typeId) {
        this.typeId = typeId;
        return this;
    }

    /**
     * type_id integer
     * 
     * @return typeId
     */
    @javax.annotation.Nonnull
    public Integer getTypeId() {
        return typeId;
    }

    public void setTypeId(@javax.annotation.Nonnull Integer typeId) {
        this.typeId = typeId;
    }

    public CharacterWalletTransactionsResponse unitPrice(@javax.annotation.Nonnull Double unitPrice) {
        this.unitPrice = unitPrice;
        return this;
    }

    /**
     * Amount paid per unit
     * 
     * @return unitPrice
     */
    @javax.annotation.Nonnull
    public Double getUnitPrice() {
        return unitPrice;
    }

    public void setUnitPrice(@javax.annotation.Nonnull Double unitPrice) {
        this.unitPrice = unitPrice;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CharacterWalletTransactionsResponse characterWalletTransactionsResponse = (CharacterWalletTransactionsResponse) o;
        return Objects.equals(this.clientId, characterWalletTransactionsResponse.clientId)
                && Objects.equals(this.date, characterWalletTransactionsResponse.date)
                && Objects.equals(this.isBuy, characterWalletTransactionsResponse.isBuy)
                && Objects.equals(this.isPersonal, characterWalletTransactionsResponse.isPersonal)
                && Objects.equals(this.journalRefId, characterWalletTransactionsResponse.journalRefId)
                && Objects.equals(this.locationId, characterWalletTransactionsResponse.locationId)
                && Objects.equals(this.quantity, characterWalletTransactionsResponse.quantity)
                && Objects.equals(this.transactionId, characterWalletTransactionsResponse.transactionId)
                && Objects.equals(this.typeId, characterWalletTransactionsResponse.typeId)
                && Objects.equals(this.unitPrice, characterWalletTransactionsResponse.unitPrice);
    }

    @Override
    public int hashCode() {
        return Objects.hash(clientId, date, isBuy, isPersonal, journalRefId, locationId, quantity, transactionId,
                typeId, unitPrice);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CharacterWalletTransactionsResponse {\n");
        sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
        sb.append("    date: ").append(toIndentedString(date)).append("\n");
        sb.append("    isBuy: ").append(toIndentedString(isBuy)).append("\n");
        sb.append("    isPersonal: ").append(toIndentedString(isPersonal)).append("\n");
        sb.append("    journalRefId: ").append(toIndentedString(journalRefId)).append("\n");
        sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
        sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
        sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
        sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("client_id");
        openapiFields.add("date");
        openapiFields.add("is_buy");
        openapiFields.add("is_personal");
        openapiFields.add("journal_ref_id");
        openapiFields.add("location_id");
        openapiFields.add("quantity");
        openapiFields.add("transaction_id");
        openapiFields.add("type_id");
        openapiFields.add("unit_price");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("client_id");
        openapiRequiredFields.add("date");
        openapiRequiredFields.add("is_buy");
        openapiRequiredFields.add("is_personal");
        openapiRequiredFields.add("journal_ref_id");
        openapiRequiredFields.add("location_id");
        openapiRequiredFields.add("quantity");
        openapiRequiredFields.add("transaction_id");
        openapiRequiredFields.add("type_id");
        openapiRequiredFields.add("unit_price");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to
     *             CharacterWalletTransactionsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CharacterWalletTransactionsResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                        // required
                                                                                        // fields
                                                                                        // but
                                                                                        // JSON
                                                                                        // element
                                                                                        // is
                                                                                        // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CharacterWalletTransactionsResponse is not found in the empty JSON string",
                                CharacterWalletTransactionsResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CharacterWalletTransactionsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CharacterWalletTransactionsResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CharacterWalletTransactionsResponse.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CharacterWalletTransactionsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CharacterWalletTransactionsResponse' and its
                             // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CharacterWalletTransactionsResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CharacterWalletTransactionsResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CharacterWalletTransactionsResponse>() {
                @Override
                public void write(JsonWriter out, CharacterWalletTransactionsResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CharacterWalletTransactionsResponse read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CharacterWalletTransactionsResponse given an JSON
     * string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CharacterWalletTransactionsResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CharacterWalletTransactionsResponse
     */
    public static CharacterWalletTransactionsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CharacterWalletTransactionsResponse.class);
    }

    /**
     * Convert an instance of CharacterWalletTransactionsResponse to an JSON
     * string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
