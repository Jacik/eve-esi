/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * 200 ok object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class CharacterNotificationsResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_IS_READ = "is_read";
    @SerializedName(SERIALIZED_NAME_IS_READ)
    private Boolean isRead;

    public static final String SERIALIZED_NAME_NOTIFICATION_ID = "notification_id";
    @SerializedName(SERIALIZED_NAME_NOTIFICATION_ID)
    private Long notificationId;

    public static final String SERIALIZED_NAME_SENDER_ID = "sender_id";
    @SerializedName(SERIALIZED_NAME_SENDER_ID)
    private Integer senderId;

    /**
     * sender_type string
     */
    @JsonAdapter(SenderTypeEnum.Adapter.class)
    public enum SenderTypeEnum {
        CHARACTER("character"),

        CORPORATION("corporation"),

        ALLIANCE("alliance"),

        FACTION("faction"),

        OTHER("other");

        private String value;

        SenderTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static SenderTypeEnum fromValue(String value) {
            for (SenderTypeEnum b : SenderTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<SenderTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final SenderTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public SenderTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return SenderTypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_SENDER_TYPE = "sender_type";
    @SerializedName(SERIALIZED_NAME_SENDER_TYPE)
    private String senderType;
    private SenderTypeEnum senderTypeEnum;

    public static final String SERIALIZED_NAME_TEXT = "text";
    @SerializedName(SERIALIZED_NAME_TEXT)
    private String text;

    public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
    @SerializedName(SERIALIZED_NAME_TIMESTAMP)
    private OffsetDateTime timestamp;

    /**
     * type string
     */
    @JsonAdapter(TypeEnum.Adapter.class)
    public enum TypeEnum {
        ACCEPTED_ALLY("AcceptedAlly"),

        ACCEPTED_SURRENDER("AcceptedSurrender"),

        AGENT_RETIRED_TRIGRAVIAN("AgentRetiredTrigravian"),

        ALL_ANCHORING_MSG("AllAnchoringMsg"),

        ALL_MAINTENANCE_BILL_MSG("AllMaintenanceBillMsg"),

        ALL_STRUC_INVULNERABLE_MSG("AllStrucInvulnerableMsg"),

        ALL_STRUCT_VULNERABLE_MSG("AllStructVulnerableMsg"),

        ALL_WAR_CORP_JOINED_ALLIANCE_MSG("AllWarCorpJoinedAllianceMsg"),

        ALL_WAR_DECLARED_MSG("AllWarDeclaredMsg"),

        ALL_WAR_INVALIDATED_MSG("AllWarInvalidatedMsg"),

        ALL_WAR_RETRACTED_MSG("AllWarRetractedMsg"),

        ALL_WAR_SURRENDER_MSG("AllWarSurrenderMsg"),

        ALLIANCE_CAPITAL_CHANGED("AllianceCapitalChanged"),

        ALLIANCE_WAR_DECLARED_V2("AllianceWarDeclaredV2"),

        ALLY_CONTRACT_CANCELLED("AllyContractCancelled"),

        ALLY_JOINED_WAR_AGGRESSOR_MSG("AllyJoinedWarAggressorMsg"),

        ALLY_JOINED_WAR_ALLY_MSG("AllyJoinedWarAllyMsg"),

        ALLY_JOINED_WAR_DEFENDER_MSG("AllyJoinedWarDefenderMsg"),

        BATTLE_PUNISH_FRIENDLY_FIRE("BattlePunishFriendlyFire"),

        BILL_OUT_OF_MONEY_MSG("BillOutOfMoneyMsg"),

        BILL_PAID_CORP_ALL_MSG("BillPaidCorpAllMsg"),

        BOUNTY_CLAIM_MSG("BountyClaimMsg"),

        BOUNTY_ESS_SHARED("BountyESSShared"),

        BOUNTY_ESS_TAKEN("BountyESSTaken"),

        BOUNTY_PLACED_ALLIANCE("BountyPlacedAlliance"),

        BOUNTY_PLACED_CHAR("BountyPlacedChar"),

        BOUNTY_PLACED_CORP("BountyPlacedCorp"),

        BOUNTY_YOUR_BOUNTY_CLAIMED("BountyYourBountyClaimed"),

        BUDDY_CONNECT_CONTACT_ADD("BuddyConnectContactAdd"),

        CHAR_APP_ACCEPT_MSG("CharAppAcceptMsg"),

        CHAR_APP_REJECT_MSG("CharAppRejectMsg"),

        CHAR_APP_WITHDRAW_MSG("CharAppWithdrawMsg"),

        CHAR_LEFT_CORP_MSG("CharLeftCorpMsg"),

        CHAR_MEDAL_MSG("CharMedalMsg"),

        CHAR_TERMINATION_MSG("CharTerminationMsg"),

        CLONE_ACTIVATION_MSG("CloneActivationMsg"),

        CLONE_ACTIVATION_MSG2("CloneActivationMsg2"),

        CLONE_MOVED_MSG("CloneMovedMsg"),

        CLONE_REVOKED_MSG1("CloneRevokedMsg1"),

        CLONE_REVOKED_MSG2("CloneRevokedMsg2"),

        COMBAT_OPERATION_FINISHED("CombatOperationFinished"),

        CONTACT_ADD("ContactAdd"),

        CONTACT_EDIT("ContactEdit"),

        CONTAINER_PASSWORD_MSG("ContainerPasswordMsg"),

        CONTRACT_REGION_CHANGED_TO_POCHVEN("ContractRegionChangedToPochven"),

        CORP_ALL_BILL_MSG("CorpAllBillMsg"),

        CORP_APP_ACCEPT_MSG("CorpAppAcceptMsg"),

        CORP_APP_INVITED_MSG("CorpAppInvitedMsg"),

        CORP_APP_NEW_MSG("CorpAppNewMsg"),

        CORP_APP_REJECT_CUSTOM_MSG("CorpAppRejectCustomMsg"),

        CORP_APP_REJECT_MSG("CorpAppRejectMsg"),

        CORP_BECAME_WAR_ELIGIBLE("CorpBecameWarEligible"),

        CORP_DIVIDEND_MSG("CorpDividendMsg"),

        CORP_FRIENDLY_FIRE_DISABLE_TIMER_COMPLETED("CorpFriendlyFireDisableTimerCompleted"),

        CORP_FRIENDLY_FIRE_DISABLE_TIMER_STARTED("CorpFriendlyFireDisableTimerStarted"),

        CORP_FRIENDLY_FIRE_ENABLE_TIMER_COMPLETED("CorpFriendlyFireEnableTimerCompleted"),

        CORP_FRIENDLY_FIRE_ENABLE_TIMER_STARTED("CorpFriendlyFireEnableTimerStarted"),

        CORP_KICKED("CorpKicked"),

        CORP_LIQUIDATION_MSG("CorpLiquidationMsg"),

        CORP_NEW_CEO_MSG("CorpNewCEOMsg"),

        CORP_NEWS_MSG("CorpNewsMsg"),

        CORP_NO_LONGER_WAR_ELIGIBLE("CorpNoLongerWarEligible"),

        CORP_OFFICE_EXPIRATION_MSG("CorpOfficeExpirationMsg"),

        CORP_STRUCT_LOST_MSG("CorpStructLostMsg"),

        CORP_TAX_CHANGE_MSG("CorpTaxChangeMsg"),

        CORP_VOTE_CEO_REVOKED_MSG("CorpVoteCEORevokedMsg"),

        CORP_VOTE_MSG("CorpVoteMsg"),

        CORP_WAR_DECLARED_MSG("CorpWarDeclaredMsg"),

        CORP_WAR_DECLARED_V2("CorpWarDeclaredV2"),

        CORP_WAR_FIGHTING_LEGAL_MSG("CorpWarFightingLegalMsg"),

        CORP_WAR_INVALIDATED_MSG("CorpWarInvalidatedMsg"),

        CORP_WAR_RETRACTED_MSG("CorpWarRetractedMsg"),

        CORP_WAR_SURRENDER_MSG("CorpWarSurrenderMsg"),

        CORPORATION_GOAL_CLOSED("CorporationGoalClosed"),

        CORPORATION_GOAL_COMPLETED("CorporationGoalCompleted"),

        CORPORATION_GOAL_CREATED("CorporationGoalCreated"),

        CORPORATION_GOAL_EXPIRED("CorporationGoalExpired"),

        CORPORATION_GOAL_LIMIT_REACHED("CorporationGoalLimitReached"),

        CORPORATION_GOAL_NAME_CHANGE("CorporationGoalNameChange"),

        CORPORATION_LEFT("CorporationLeft"),

        CUSTOMS_MSG("CustomsMsg"),

        DAILY_ITEM_REWARD_AUTO_CLAIMED("DailyItemRewardAutoClaimed"),

        DECLARE_WAR("DeclareWar"),

        DISTRICT_ATTACKED("DistrictAttacked"),

        DUST_APP_ACCEPTED_MSG("DustAppAcceptedMsg"),

        ESS_MAIN_BANK_LINK("ESSMainBankLink"),

        ENTOSIS_CAPTURE_STARTED("EntosisCaptureStarted"),

        EXPERT_SYSTEM_EXPIRED("ExpertSystemExpired"),

        EXPERT_SYSTEM_EXPIRY_IMMINENT("ExpertSystemExpiryImminent"),

        FW_ALLIANCE_KICK_MSG("FWAllianceKickMsg"),

        FW_ALLIANCE_WARNING_MSG("FWAllianceWarningMsg"),

        FW_CHAR_KICK_MSG("FWCharKickMsg"),

        FW_CHAR_RANK_GAIN_MSG("FWCharRankGainMsg"),

        FW_CHAR_RANK_LOSS_MSG("FWCharRankLossMsg"),

        FW_CHAR_WARNING_MSG("FWCharWarningMsg"),

        FW_CORP_JOIN_MSG("FWCorpJoinMsg"),

        FW_CORP_KICK_MSG("FWCorpKickMsg"),

        FW_CORP_LEAVE_MSG("FWCorpLeaveMsg"),

        FW_CORP_WARNING_MSG("FWCorpWarningMsg"),

        FAC_WAR_CORP_JOIN_REQUEST_MSG("FacWarCorpJoinRequestMsg"),

        FAC_WAR_CORP_JOIN_WITHDRAW_MSG("FacWarCorpJoinWithdrawMsg"),

        FAC_WAR_CORP_LEAVE_REQUEST_MSG("FacWarCorpLeaveRequestMsg"),

        FAC_WAR_CORP_LEAVE_WITHDRAW_MSG("FacWarCorpLeaveWithdrawMsg"),

        FAC_WAR_LP_DISQUALIFIED_EVENT("FacWarLPDisqualifiedEvent"),

        FAC_WAR_LP_DISQUALIFIED_KILL("FacWarLPDisqualifiedKill"),

        FAC_WAR_LP_PAYOUT_EVENT("FacWarLPPayoutEvent"),

        FAC_WAR_LP_PAYOUT_KILL("FacWarLPPayoutKill"),

        GAME_TIME_ADDED("GameTimeAdded"),

        GAME_TIME_RECEIVED("GameTimeReceived"),

        GAME_TIME_SENT("GameTimeSent"),

        GIFT_RECEIVED("GiftReceived"),

        I_HUB_DESTROYED_BY_BILL_FAILURE("IHubDestroyedByBillFailure"),

        INCURSION_COMPLETED_MSG("IncursionCompletedMsg"),

        INDUSTRY_OPERATION_FINISHED("IndustryOperationFinished"),

        INDUSTRY_TEAM_AUCTION_LOST("IndustryTeamAuctionLost"),

        INDUSTRY_TEAM_AUCTION_WON("IndustryTeamAuctionWon"),

        INFRASTRUCTURE_HUB_BILL_ABOUT_TO_EXPIRE("InfrastructureHubBillAboutToExpire"),

        INSURANCE_EXPIRATION_MSG("InsuranceExpirationMsg"),

        INSURANCE_FIRST_SHIP_MSG("InsuranceFirstShipMsg"),

        INSURANCE_INVALIDATED_MSG("InsuranceInvalidatedMsg"),

        INSURANCE_ISSUED_MSG("InsuranceIssuedMsg"),

        INSURANCE_PAYOUT_MSG("InsurancePayoutMsg"),

        INVASION_COMPLETED_MSG("InvasionCompletedMsg"),

        INVASION_SYSTEM_LOGIN("InvasionSystemLogin"),

        INVASION_SYSTEM_START("InvasionSystemStart"),

        JUMP_CLONE_DELETED_MSG1("JumpCloneDeletedMsg1"),

        JUMP_CLONE_DELETED_MSG2("JumpCloneDeletedMsg2"),

        KILL_REPORT_FINAL_BLOW("KillReportFinalBlow"),

        KILL_REPORT_VICTIM("KillReportVictim"),

        KILL_RIGHT_AVAILABLE("KillRightAvailable"),

        KILL_RIGHT_AVAILABLE_OPEN("KillRightAvailableOpen"),

        KILL_RIGHT_EARNED("KillRightEarned"),

        KILL_RIGHT_UNAVAILABLE("KillRightUnavailable"),

        KILL_RIGHT_UNAVAILABLE_OPEN("KillRightUnavailableOpen"),

        KILL_RIGHT_USED("KillRightUsed"),

        LP_AUTO_REDEEMED("LPAutoRedeemed"),

        LOCATE_CHAR_MSG("LocateCharMsg"),

        MADE_WAR_MUTUAL("MadeWarMutual"),

        MERC_OFFER_RETRACTED_MSG("MercOfferRetractedMsg"),

        MERC_OFFERED_NEGOTIATION_MSG("MercOfferedNegotiationMsg"),

        MERCENARY_DEN_ATTACKED("MercenaryDenAttacked"),

        MERCENARY_DEN_NEW_MTO("MercenaryDenNewMTO"),

        MERCENARY_DEN_REINFORCED("MercenaryDenReinforced"),

        MISSION_CANCELED_TRIGLAVIAN("MissionCanceledTriglavian"),

        MISSION_OFFER_EXPIRATION_MSG("MissionOfferExpirationMsg"),

        MISSION_TIMEOUT_MSG("MissionTimeoutMsg"),

        MOONMINING_AUTOMATIC_FRACTURE("MoonminingAutomaticFracture"),

        MOONMINING_EXTRACTION_CANCELLED("MoonminingExtractionCancelled"),

        MOONMINING_EXTRACTION_FINISHED("MoonminingExtractionFinished"),

        MOONMINING_EXTRACTION_STARTED("MoonminingExtractionStarted"),

        MOONMINING_LASER_FIRED("MoonminingLaserFired"),

        MUTUAL_WAR_EXPIRED("MutualWarExpired"),

        MUTUAL_WAR_INVITE_ACCEPTED("MutualWarInviteAccepted"),

        MUTUAL_WAR_INVITE_REJECTED("MutualWarInviteRejected"),

        MUTUAL_WAR_INVITE_SENT("MutualWarInviteSent"),

        NPC_STANDINGS_GAINED("NPCStandingsGained"),

        NPC_STANDINGS_LOST("NPCStandingsLost"),

        OFFER_TO_ALLY_RETRACTED("OfferToAllyRetracted"),

        OFFERED_SURRENDER("OfferedSurrender"),

        OFFERED_TO_ALLY("OfferedToAlly"),

        OFFICE_LEASE_CANCELED_INSUFFICIENT_STANDINGS("OfficeLeaseCanceledInsufficientStandings"),

        OLD_LSC_MESSAGES("OldLscMessages"),

        OPERATION_FINISHED("OperationFinished"),

        ORBITAL_ATTACKED("OrbitalAttacked"),

        ORBITAL_REINFORCED("OrbitalReinforced"),

        OWNERSHIP_TRANSFERRED("OwnershipTransferred"),

        RAFFLE_CREATED("RaffleCreated"),

        RAFFLE_EXPIRED("RaffleExpired"),

        RAFFLE_FINISHED("RaffleFinished"),

        REIMBURSEMENT_MSG("ReimbursementMsg"),

        RESEARCH_MISSION_AVAILABLE_MSG("ResearchMissionAvailableMsg"),

        RETRACTS_WAR("RetractsWar"),

        SP_AUTO_REDEEMED("SPAutoRedeemed"),

        SEASONAL_CHALLENGE_COMPLETED("SeasonalChallengeCompleted"),

        SKIN_SEQUENCING_COMPLETED("SkinSequencingCompleted"),

        SKYHOOK_DEPLOYED("SkyhookDeployed"),

        SKYHOOK_DESTROYED("SkyhookDestroyed"),

        SKYHOOK_LOST_SHIELDS("SkyhookLostShields"),

        SKYHOOK_ONLINE("SkyhookOnline"),

        SKYHOOK_UNDER_ATTACK("SkyhookUnderAttack"),

        SOV_ALL_CLAIM_AQUIRED_MSG("SovAllClaimAquiredMsg"),

        SOV_ALL_CLAIM_LOST_MSG("SovAllClaimLostMsg"),

        SOV_COMMAND_NODE_EVENT_STARTED("SovCommandNodeEventStarted"),

        SOV_CORP_BILL_LATE_MSG("SovCorpBillLateMsg"),

        SOV_CORP_CLAIM_FAIL_MSG("SovCorpClaimFailMsg"),

        SOV_DISRUPTOR_MSG("SovDisruptorMsg"),

        SOV_STATION_ENTERED_FREEPORT("SovStationEnteredFreeport"),

        SOV_STRUCTURE_DESTROYED("SovStructureDestroyed"),

        SOV_STRUCTURE_REINFORCED("SovStructureReinforced"),

        SOV_STRUCTURE_SELF_DESTRUCT_CANCEL("SovStructureSelfDestructCancel"),

        SOV_STRUCTURE_SELF_DESTRUCT_FINISHED("SovStructureSelfDestructFinished"),

        SOV_STRUCTURE_SELF_DESTRUCT_REQUESTED("SovStructureSelfDestructRequested"),

        SOVEREIGNTY_IH_DAMAGE_MSG("SovereigntyIHDamageMsg"),

        SOVEREIGNTY_SBU_DAMAGE_MSG("SovereigntySBUDamageMsg"),

        SOVEREIGNTY_TCU_DAMAGE_MSG("SovereigntyTCUDamageMsg"),

        STATION_AGGRESSION_MSG1("StationAggressionMsg1"),

        STATION_AGGRESSION_MSG2("StationAggressionMsg2"),

        STATION_CONQUER_MSG("StationConquerMsg"),

        STATION_SERVICE_DISABLED("StationServiceDisabled"),

        STATION_SERVICE_ENABLED("StationServiceEnabled"),

        STATION_STATE_CHANGE_MSG("StationStateChangeMsg"),

        STORY_LINE_MISSION_AVAILABLE_MSG("StoryLineMissionAvailableMsg"),

        STRUCTURE_ANCHORING("StructureAnchoring"),

        STRUCTURE_COURIER_CONTRACT_CHANGED("StructureCourierContractChanged"),

        STRUCTURE_DESTROYED("StructureDestroyed"),

        STRUCTURE_FUEL_ALERT("StructureFuelAlert"),

        STRUCTURE_IMPENDING_ABANDONMENT_ASSETS_AT_RISK("StructureImpendingAbandonmentAssetsAtRisk"),

        STRUCTURE_ITEMS_DELIVERED("StructureItemsDelivered"),

        STRUCTURE_ITEMS_MOVED_TO_SAFETY("StructureItemsMovedToSafety"),

        STRUCTURE_LOST_ARMOR("StructureLostArmor"),

        STRUCTURE_LOST_SHIELDS("StructureLostShields"),

        STRUCTURE_LOW_REAGENTS_ALERT("StructureLowReagentsAlert"),

        STRUCTURE_NO_REAGENTS_ALERT("StructureNoReagentsAlert"),

        STRUCTURE_ONLINE("StructureOnline"),

        STRUCTURE_PAINT_PURCHASED("StructurePaintPurchased"),

        STRUCTURE_SERVICES_OFFLINE("StructureServicesOffline"),

        STRUCTURE_UNANCHORING("StructureUnanchoring"),

        STRUCTURE_UNDER_ATTACK("StructureUnderAttack"),

        STRUCTURE_WENT_HIGH_POWER("StructureWentHighPower"),

        STRUCTURE_WENT_LOW_POWER("StructureWentLowPower"),

        STRUCTURES_JOBS_CANCELLED("StructuresJobsCancelled"),

        STRUCTURES_JOBS_PAUSED("StructuresJobsPaused"),

        STRUCTURES_REINFORCEMENT_CHANGED("StructuresReinforcementChanged"),

        TOWER_ALERT_MSG("TowerAlertMsg"),

        TOWER_RESOURCE_ALERT_MSG("TowerResourceAlertMsg"),

        TRANSACTION_REVERSAL_MSG("TransactionReversalMsg"),

        TUTORIAL_MSG("TutorialMsg"),

        WAR_ADOPTED_("WarAdopted "),

        WAR_ALLY_INHERITED("WarAllyInherited"),

        WAR_ALLY_OFFER_DECLINED_MSG("WarAllyOfferDeclinedMsg"),

        WAR_CONCORD_INVALIDATES("WarConcordInvalidates"),

        WAR_DECLARED("WarDeclared"),

        WAR_ENDED_HQ_SECURITY_DROP("WarEndedHqSecurityDrop"),

        WAR_HQ_REMOVED_FROM_SPACE("WarHQRemovedFromSpace"),

        WAR_INHERITED("WarInherited"),

        WAR_INVALID("WarInvalid"),

        WAR_RETRACTED("WarRetracted"),

        WAR_RETRACTED_BY_CONCORD("WarRetractedByConcord"),

        WAR_SURRENDER_DECLINED_MSG("WarSurrenderDeclinedMsg"),

        WAR_SURRENDER_OFFER_MSG("WarSurrenderOfferMsg");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<TypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_TYPE = "type";
    @SerializedName(SERIALIZED_NAME_TYPE)
    private String type;
    private TypeEnum typeEnum;

    public CharacterNotificationsResponse() {
    }

    public CharacterNotificationsResponse isRead(Boolean isRead) {

        this.isRead = isRead;
        return this;
    }

    /**
     * is_read boolean
     * 
     * @return isRead
     **/
    @javax.annotation.Nullable
    public Boolean getIsRead() {
        return isRead;
    }

    public void setIsRead(Boolean isRead) {
        this.isRead = isRead;
    }

    public CharacterNotificationsResponse notificationId(Long notificationId) {

        this.notificationId = notificationId;
        return this;
    }

    /**
     * notification_id integer
     * 
     * @return notificationId
     **/
    @javax.annotation.Nonnull
    public Long getNotificationId() {
        return notificationId;
    }

    public void setNotificationId(Long notificationId) {
        this.notificationId = notificationId;
    }

    public CharacterNotificationsResponse senderId(Integer senderId) {

        this.senderId = senderId;
        return this;
    }

    /**
     * sender_id integer
     * 
     * @return senderId
     **/
    @javax.annotation.Nonnull
    public Integer getSenderId() {
        return senderId;
    }

    public void setSenderId(Integer senderId) {
        this.senderId = senderId;
    }

    public CharacterNotificationsResponse senderTypeString(String senderType) {

        this.senderType = senderType;
        return this;
    }

    public CharacterNotificationsResponse senderType(SenderTypeEnum senderTypeEnum) {

        this.senderTypeEnum = senderTypeEnum;
        return this;
    }

    /**
     * sender_type string
     * 
     * @return senderType
     **/
    @javax.annotation.Nonnull
    public SenderTypeEnum getSenderType() {
        if (senderTypeEnum == null) {
            senderTypeEnum = SenderTypeEnum.fromValue(senderType);
        }
        return senderTypeEnum;
    }

    public String getSenderTypeString() {
        return senderType;
    }

    public void setSenderType(SenderTypeEnum senderTypeEnum) {
        this.senderTypeEnum = senderTypeEnum;
    }

    public void setSenderTypeString(String senderType) {
        this.senderType = senderType;
    }

    public CharacterNotificationsResponse text(String text) {

        this.text = text;
        return this;
    }

    /**
     * text string
     * 
     * @return text
     **/
    @javax.annotation.Nullable
    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public CharacterNotificationsResponse timestamp(OffsetDateTime timestamp) {

        this.timestamp = timestamp;
        return this;
    }

    /**
     * timestamp string
     * 
     * @return timestamp
     **/
    @javax.annotation.Nonnull
    public OffsetDateTime getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
    }

    public CharacterNotificationsResponse typeString(String type) {

        this.type = type;
        return this;
    }

    public CharacterNotificationsResponse type(TypeEnum typeEnum) {

        this.typeEnum = typeEnum;
        return this;
    }

    /**
     * type string
     * 
     * @return type
     **/
    @javax.annotation.Nonnull
    public TypeEnum getType() {
        if (typeEnum == null) {
            typeEnum = TypeEnum.fromValue(type);
        }
        return typeEnum;
    }

    public String getTypeString() {
        return type;
    }

    public void setType(TypeEnum typeEnum) {
        this.typeEnum = typeEnum;
    }

    public void setTypeString(String type) {
        this.type = type;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CharacterNotificationsResponse characterNotificationsResponse = (CharacterNotificationsResponse) o;
        return Objects.equals(this.isRead, characterNotificationsResponse.isRead)
                && Objects.equals(this.notificationId, characterNotificationsResponse.notificationId)
                && Objects.equals(this.senderId, characterNotificationsResponse.senderId)
                && Objects.equals(this.senderType, characterNotificationsResponse.senderType)
                && Objects.equals(this.text, characterNotificationsResponse.text)
                && Objects.equals(this.timestamp, characterNotificationsResponse.timestamp)
                && Objects.equals(this.type, characterNotificationsResponse.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(isRead, notificationId, senderId, senderType, text, timestamp, type);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CharacterNotificationsResponse {\n");
        sb.append("    isRead: ").append(toIndentedString(isRead)).append("\n");
        sb.append("    notificationId: ").append(toIndentedString(notificationId)).append("\n");
        sb.append("    senderId: ").append(toIndentedString(senderId)).append("\n");
        sb.append("    senderType: ").append(toIndentedString(senderType)).append("\n");
        sb.append("    text: ").append(toIndentedString(text)).append("\n");
        sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("is_read");
        openapiFields.add("notification_id");
        openapiFields.add("sender_id");
        openapiFields.add("sender_type");
        openapiFields.add("text");
        openapiFields.add("timestamp");
        openapiFields.add("type");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("notification_id");
        openapiRequiredFields.add("sender_id");
        openapiRequiredFields.add("sender_type");
        openapiRequiredFields.add("timestamp");
        openapiRequiredFields.add("type");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj
     *            JSON Object
     * @throws IOException
     *             if the JSON Object is invalid with respect to
     *             CharacterNotificationsResponse
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CharacterNotificationsResponse.openapiRequiredFields.isEmpty()) { // has
                                                                                   // required
                                                                                   // fields
                                                                                   // but
                                                                                   // JSON
                                                                                   // object
                                                                                   // is
                                                                                   // null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CharacterNotificationsResponse is not found in the empty JSON string",
                                CharacterNotificationsResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CharacterNotificationsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `CharacterNotificationsResponse` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : CharacterNotificationsResponse.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonObj.toString()));
            }
        }
        if (!jsonObj.get("sender_type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `sender_type` to be a primitive type in the JSON string but got `%s`", jsonObj
                            .get("sender_type").toString()));
        }
        if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull())
                && !jsonObj.get("text").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `text` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("text").toString()));
        }
        if (!jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `type` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("type").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CharacterNotificationsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                             // 'CharacterNotificationsResponse' and its
                             // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CharacterNotificationsResponse> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(CharacterNotificationsResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<CharacterNotificationsResponse>() {
                @Override
                public void write(JsonWriter out, CharacterNotificationsResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CharacterNotificationsResponse read(JsonReader in) throws IOException {
                    JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                    validateJsonObject(jsonObj);
                    return thisAdapter.fromJsonTree(jsonObj);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CharacterNotificationsResponse given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of CharacterNotificationsResponse
     * @throws IOException
     *             if the JSON string is invalid with respect to
     *             CharacterNotificationsResponse
     */
    public static CharacterNotificationsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CharacterNotificationsResponse.class);
    }

    /**
     * Convert an instance of CharacterNotificationsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
