/*
 * ESI Meta Spec
 * ESI specs and miscellaneous routes
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.troja.eve.esi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.troja.eve.esi.JSON;

/**
 * SSO /verify JSON
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class GetVerifyError implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String SERIALIZED_NAME_ERROR = "error";
    @SerializedName(SERIALIZED_NAME_ERROR)
    @javax.annotation.Nonnull
    private String error;

    public static final String SERIALIZED_NAME_ERROR_DESCRIPTION = "error_description";
    @SerializedName(SERIALIZED_NAME_ERROR_DESCRIPTION)
    @javax.annotation.Nullable
    private String errorDescription;

    public GetVerifyError() {
    }

    public GetVerifyError error(@javax.annotation.Nonnull String error) {
        this.error = error;
        return this;
    }

    /**
     * Generic error returned by SSO
     * 
     * @return error
     */
    @javax.annotation.Nonnull
    public String getError() {
        return error;
    }

    public void setError(@javax.annotation.Nonnull String error) {
        this.error = error;
    }

    public GetVerifyError errorDescription(@javax.annotation.Nullable String errorDescription) {
        this.errorDescription = errorDescription;
        return this;
    }

    /**
     * Detailed error description from SSO
     * 
     * @return errorDescription
     */
    @javax.annotation.Nullable
    public String getErrorDescription() {
        return errorDescription;
    }

    public void setErrorDescription(@javax.annotation.Nullable String errorDescription) {
        this.errorDescription = errorDescription;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetVerifyError getVerifyError = (GetVerifyError) o;
        return Objects.equals(this.error, getVerifyError.error)
                && Objects.equals(this.errorDescription, getVerifyError.errorDescription);
    }

    @Override
    public int hashCode() {
        return Objects.hash(error, errorDescription);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetVerifyError {\n");
        sb.append("    error: ").append(toIndentedString(error)).append("\n");
        sb.append("    errorDescription: ").append(toIndentedString(errorDescription)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("error");
        openapiFields.add("error_description");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("error");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement
     *            JSON Element
     * @throws IOException
     *             if the JSON Element is invalid with respect to GetVerifyError
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetVerifyError.openapiRequiredFields.isEmpty()) { // has
                                                                   // required
                                                                   // fields but
                                                                   // JSON
                                                                   // element is
                                                                   // null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in GetVerifyError is not found in the empty JSON string",
                        GetVerifyError.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetVerifyError.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `GetVerifyError` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the
        // JSON string
        for (String requiredField : GetVerifyError.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(String.format(
                        "The required field `%s` is not found in the JSON string: %s", requiredField,
                        jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("error").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `error` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("error").toString()));
        }
        if ((jsonObj.get("error_description") != null && !jsonObj.get("error_description").isJsonNull())
                && !jsonObj.get("error_description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `error_description` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("error_description").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetVerifyError.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetVerifyError' and
                             // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetVerifyError> thisAdapter = gson.getDelegateAdapter(this,
                    TypeToken.get(GetVerifyError.class));

            return (TypeAdapter<T>) new TypeAdapter<GetVerifyError>() {
                @Override
                public void write(JsonWriter out, GetVerifyError value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public GetVerifyError read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of GetVerifyError given an JSON string
     *
     * @param jsonString
     *            JSON string
     * @return An instance of GetVerifyError
     * @throws IOException
     *             if the JSON string is invalid with respect to GetVerifyError
     */
    public static GetVerifyError fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetVerifyError.class);
    }

    /**
     * Convert an instance of GetVerifyError to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
