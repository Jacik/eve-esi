/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package net.troja.eve.esi.api;

import net.troja.eve.esi.ApiException;
import net.troja.eve.esi.model.CharacterCalendarAttendeesResponse;
import net.troja.eve.esi.model.CharacterCalendarEvent;
import net.troja.eve.esi.model.CharacterCalendarEventResponse;
import net.troja.eve.esi.model.CharacterCalendarResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * API tests for CalendarApi
 */
public class CalendarApiTest extends GeneralApiTest {

    private final CalendarApi api = new CalendarApi();

    @BeforeEach
    public void setUp() {
        api.setApiClient(apiClient);
    }

    /**
     * List calendar event summaries
     *
     * Get 50 event summaries from the calendar. If no from_event ID is given, the resource will return the next 50 chronological event summaries from now. If a from_event ID is specified, it will return the next 50 chronological event summaries from after that event  ---  This route is cached for up to 5 seconds  SSO Scope: esi-calendar.read_calendar_events.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdCalendarTest() throws ApiException {
        Integer fromEvent = null;
        String ifNoneMatch = null;
        String token = null;
        List<CharacterCalendarResponse> response = api.getCharactersCharacterIdCalendar(characterId, DATASOURCE, fromEvent, ifNoneMatch, token);
        assertThat(response).isNotNull();
    }

    /**
     * Get an event
     *
     * Get all the information for a specific event  ---  This route is cached for up to 5 seconds  SSO Scope: esi-calendar.read_calendar_events.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("No calendar entries exist")
    public void getCharactersCharacterIdCalendarEventIdTest() throws ApiException {
        String ifNoneMatch = null;
        String token = null;

        final Integer eventId = getEventId(ifNoneMatch, token);
        CharacterCalendarEventResponse response = api.getCharactersCharacterIdCalendarEventId(characterId, eventId, DATASOURCE, ifNoneMatch, token);
        assertThat(response.getEventId()).isEqualTo(eventId);
    }



    /**
     * Get attendees
     *
     * Get all invited attendees for a given event  ---  This route is cached for up to 600 seconds  SSO Scope: esi-calendar.read_calendar_events.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("No calendar entries exist")
    public void getCharactersCharacterIdCalendarEventIdAttendeesTest() throws ApiException {
        String ifNoneMatch = null;
        String token = null;
        final Integer eventId = getEventId(ifNoneMatch, token);
        List<CharacterCalendarAttendeesResponse> response = api.getCharactersCharacterIdCalendarEventIdAttendees(characterId, eventId, DATASOURCE, ifNoneMatch, token);
        assertThat(response).isNotNull();
    }

    /**
     * Respond to an event
     *
     * Set your response status to an event  ---  This route is cached for up to 5 seconds  SSO Scope: esi-calendar.respond_calendar_events.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("Can't test put")
    public void putCharactersCharacterIdCalendarEventIdTest() throws ApiException {
        Integer characterId = null;
        Integer eventId = null;
        CharacterCalendarEvent response = null;
        String datasource = null;
        String token = null;
        api.putCharactersCharacterIdCalendarEventId(characterId, eventId, response, datasource, token);
        // TODO: test validations
    }

    private Integer getEventId(final String ifNoneMatch, final String token) throws ApiException {
        final List<CharacterCalendarResponse> calendar = api.getCharactersCharacterIdCalendar(characterId, DATASOURCE, null,
                ifNoneMatch, token);
        assertThat(calendar).isNotNull().isNotEmpty();
        return calendar.get(0).getEventId();
    }
}
