/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package net.troja.eve.esi.api;

import net.troja.eve.esi.ApiException;
import net.troja.eve.esi.model.CharacterFitting;
import net.troja.eve.esi.model.CharacterFittingResponse;
import net.troja.eve.esi.model.CharacterFittingsResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * API tests for FittingsApi
 */
public class FittingsApiTest extends GeneralApiTest {

    private final FittingsApi api = new FittingsApi();

    @BeforeEach
    public void setUp() {
        api.setApiClient(apiClient);
    }

    /**
     * Delete fitting
     *
     * Delete a fitting from a character  ---   SSO Scope: esi-fittings.write_fittings.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("Delete can't be tested")
    public void deleteCharactersCharacterIdFittingsFittingIdTest() throws ApiException {
        Integer characterId = null;
        Integer fittingId = null;
        String datasource = null;
        String token = null;
        api.deleteCharactersCharacterIdFittingsFittingId(characterId, fittingId, datasource, token);
        // TODO: test validations
    }

    /**
     * Get fittings
     *
     * Return fittings of a character  ---  This route is cached for up to 300 seconds  SSO Scope: esi-fittings.read_fittings.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdFittingsTest() throws ApiException {
        String ifNoneMatch = null;
        String token = null;
        List<CharacterFittingsResponse> response = api.getCharactersCharacterIdFittings(characterId, DATASOURCE, ifNoneMatch, token);
        assertThat(response).isNotEmpty();
        assertThat(response.get(0).getItems()).isNotEmpty();
    }

    /**
     * Create fitting
     *
     * Save a new fitting for a character  ---   SSO Scope: esi-fittings.write_fittings.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("Writing can't be tested")
    public void postCharactersCharacterIdFittingsTest() throws ApiException {
        Integer characterId = null;
        CharacterFitting fitting = null;
        String datasource = null;
        String token = null;
        CharacterFittingResponse response = api.postCharactersCharacterIdFittings(characterId, fitting, datasource, token);
        // TODO: test validations
    }
}
