/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package net.troja.eve.esi.api;

import net.troja.eve.esi.ApiException;
import net.troja.eve.esi.model.CharacterContractsBidsResponse;
import net.troja.eve.esi.model.CharacterContractsItemsResponse;
import net.troja.eve.esi.model.CharacterContractsResponse;
import net.troja.eve.esi.model.CorporationContractsBidsResponse;
import net.troja.eve.esi.model.CorporationContractsItemsResponse;
import net.troja.eve.esi.model.CorporationContractsResponse;
import net.troja.eve.esi.model.PublicContractsBidsResponse;
import net.troja.eve.esi.model.PublicContractsItemsResponse;
import net.troja.eve.esi.model.PublicContractsResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * API tests for ContractsApi
 */
public class ContractsApiTest extends GeneralApiTest {

    private final ContractsApi api = new ContractsApi();

    @BeforeEach
    public void setUp() {
        api.setApiClient(apiClient);
    }

    /**
     * Get contracts
     *
     * Returns contracts available to a character, only if the character is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  ---  This route is cached for up to 300 seconds
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdContractsTest() throws ApiException {
        String ifNoneMatch = null;
        Integer page = null;
        String token = null;
        List<CharacterContractsResponse> response = api.getCharactersCharacterIdContracts(characterId, DATASOURCE, ifNoneMatch, page, token);
        assertThat(response).hasSizeGreaterThan(0);
        final CharacterContractsResponse characterContractsResponse = response.get(0);
        assertThat(characterContractsResponse.getContractId()).isGreaterThan(0);
    }

    /**
     * Get contract bids
     *
     * Lists bids on a particular auction contract  ---  This route is cached for up to 300 seconds  SSO Scope: esi-contracts.read_character_contracts.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdContractsContractIdBidsTest() throws ApiException {
        Integer contractId = getContractForType(CharacterContractsResponse.TypeEnum.AUCTION);
        String ifNoneMatch = null;
        String token = null;
        if(contractId != -1) {
            List<CharacterContractsBidsResponse> response =
                    api.getCharactersCharacterIdContractsContractIdBids(characterId, contractId, DATASOURCE,
                            ifNoneMatch, token);
            assertThat(response).hasSizeGreaterThan(0);
            assertThat(response.get(0).getAmount()).isGreaterThan(0f);
        }
    }

    /**
     * Get contract items
     *
     * Lists items of a particular contract  ---  This route is cached for up to 3600 seconds  SSO Scope: esi-contracts.read_corporation_contracts.v1  SSO Scope: esi-contracts.read_character_contracts.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdContractsContractIdItemsTest() throws ApiException {
        Integer contractId = getContractForType(CharacterContractsResponse.TypeEnum.ITEM_EXCHANGE);
        String ifNoneMatch = null;
        String token = null;
        if(contractId != -1) {
            List<CharacterContractsItemsResponse> response =
                    api.getCharactersCharacterIdContractsContractIdItems(characterId, contractId, DATASOURCE,
                            ifNoneMatch, token);
            assertThat(response).hasSizeGreaterThan(0);
        }
    }

    /**
     * Get public contract bids
     *
     * Lists bids on a public auction contract  ---  This route is cached for up to 300 seconds
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("To hard to find a contract with bids")
    public void getContractsPublicBidsContractIdTest() throws ApiException {
        Integer contractId = getPublicContract();
        String ifNoneMatch = null;
        Integer page = null;
        List<PublicContractsBidsResponse> response =
                api.getContractsPublicBidsContractId(contractId, DATASOURCE, ifNoneMatch, page);
        assertThat(response).isNotEmpty();
    }

    /**
     * Get public contract items
     *
     * Lists items of a public contract  ---  This route is cached for up to 3600 seconds
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContractsPublicItemsContractIdTest() throws ApiException {
        Integer contractId = getPublicContract();
        String datasource = null;
        String ifNoneMatch = null;
        Integer page = null;
        List<PublicContractsItemsResponse> response = api.getContractsPublicItemsContractId(contractId, datasource, ifNoneMatch, page);
        assertThat(response).isNotNull();
    }

    /**
     * Get public contracts
     *
     * Returns a paginated list of all public contracts in the given region  ---  This route is cached for up to 1800 seconds
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContractsPublicRegionIdTest() throws ApiException {
        String ifNoneMatch = null;
        Integer page = null;
        List<PublicContractsResponse> response = api.getContractsPublicRegionId(REGION_ID_THE_FORGE, DATASOURCE, ifNoneMatch, page);
        assertThat(response).isNotEmpty();
    }

    /**
     * Get corporation contracts
     *
     * Returns contracts available to a corporation, only if the corporation is issuer, acceptor or assignee. Only returns contracts no older than 30 days, or if the status is \&quot;in_progress\&quot;.  ---  This route is cached for up to 300 seconds
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("Needs corporation with read access")
    public void getCorporationsCorporationIdContractsTest() throws ApiException {
        Integer corporationId = null;
        String datasource = null;
        String ifNoneMatch = null;
        Integer page = null;
        String token = null;
        List<CorporationContractsResponse> response = api.getCorporationsCorporationIdContracts(corporationId, datasource, ifNoneMatch, page, token);
        // TODO: test validations
    }

    /**
     * Get corporation contract bids
     *
     * Lists bids on a particular auction contract  ---  This route is cached for up to 3600 seconds  SSO Scope: esi-contracts.read_corporation_contracts.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("Needs corporation with read access")
    public void getCorporationsCorporationIdContractsContractIdBidsTest() throws ApiException {
        Integer contractId = null;
        Integer corporationId = null;
        String datasource = null;
        String ifNoneMatch = null;
        Integer page = null;
        String token = null;
        List<CorporationContractsBidsResponse> response = api.getCorporationsCorporationIdContractsContractIdBids(contractId, corporationId, datasource, ifNoneMatch, page, token);
        // TODO: test validations
    }

    /**
     * Get corporation contract items
     *
     * Lists items of a particular contract  ---  This route is cached for up to 3600 seconds  SSO Scope: esi-contracts.read_corporation_contracts.v1  SSO Scope: esi-contracts.read_character_contracts.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("Needs corporation with read access")
    public void getCorporationsCorporationIdContractsContractIdItemsTest() throws ApiException {
        Integer contractId = null;
        Integer corporationId = null;
        String datasource = null;
        String ifNoneMatch = null;
        String token = null;
        List<CorporationContractsItemsResponse> response = api.getCorporationsCorporationIdContractsContractIdItems(contractId, corporationId, datasource, ifNoneMatch, token);
        // TODO: test validations
    }

    private Integer getContractForType(CharacterContractsResponse.TypeEnum type) throws ApiException {
        List<CharacterContractsResponse> response = api.getCharactersCharacterIdContracts(characterId, DATASOURCE, null, null, null);
        return response.stream()
                .filter(resp -> resp.getType() == type)
                .findFirst().map(CharacterContractsResponse::getContractId).orElse(-1);
    }

    private Integer getPublicContract() throws ApiException {
        for (int page = 1; page <= 20; page++) {
            List<PublicContractsResponse> contractsPublicRegionId =
                    api.getContractsPublicRegionId(REGION_ID_THE_FORGE, DATASOURCE, null, page);
            Optional<Integer> contractId = contractsPublicRegionId.stream()
                    .filter(contract -> contract.getType() == PublicContractsResponse.TypeEnum.AUCTION)
                    .findFirst().map(PublicContractsResponse::getContractId);
            if (contractId.isPresent()) {
                return contractId.get();
            }
        }
        return -1;
    }
}
