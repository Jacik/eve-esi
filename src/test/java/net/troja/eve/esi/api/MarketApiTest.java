/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package net.troja.eve.esi.api;

import net.troja.eve.esi.ApiException;
import net.troja.eve.esi.ApiResponse;
import net.troja.eve.esi.HeaderUtil;
import net.troja.eve.esi.model.CharacterOrdersHistoryResponse;
import net.troja.eve.esi.model.CharacterOrdersResponse;
import net.troja.eve.esi.model.CorporationOrdersHistoryResponse;
import net.troja.eve.esi.model.CorporationOrdersResponse;
import net.troja.eve.esi.model.MarketGroupResponse;
import net.troja.eve.esi.model.MarketHistoryResponse;
import net.troja.eve.esi.model.MarketOrdersResponse;
import net.troja.eve.esi.model.MarketPricesResponse;
import net.troja.eve.esi.model.MarketStructuresResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * API tests for MarketApi
 */
public class MarketApiTest extends GeneralApiTest {

    private final MarketApi api = new MarketApi();

    @BeforeEach
    public void setUp() {
        api.setApiClient(apiClient);
    }

    /**
     * List open orders from a character
     *
     * List open market orders placed by a character  ---  This route is cached for up to 1200 seconds  SSO Scope: esi-markets.read_character_orders.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdOrdersTest() throws ApiException {
        String ifNoneMatch = null;
        String token = null;
        List<CharacterOrdersResponse> response = api.getCharactersCharacterIdOrders(characterId, DATASOURCE, ifNoneMatch, token);
        assertThat(response).isNotEmpty();
    }

    /**
     * List historical orders by a character
     *
     * List cancelled and expired market orders placed by a character up to 90 days in the past.  ---  This route is cached for up to 3600 seconds  SSO Scope: esi-markets.read_character_orders.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdOrdersHistoryTest() throws ApiException {
        String ifNoneMatch = null;
        Integer page = null;
        String token = null;
        List<CharacterOrdersHistoryResponse> response = api.getCharactersCharacterIdOrdersHistory(characterId, DATASOURCE, ifNoneMatch, page, token);
        assertThat(response).isNotEmpty();
    }

    /**
     * List open orders from a corporation
     *
     * List open market orders placed on behalf of a corporation  ---  This route is cached for up to 1200 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Trader  SSO Scope: esi-markets.read_corporation_orders.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("Needs corporation with read access")
    public void getCorporationsCorporationIdOrdersTest() throws ApiException {
        Integer corporationId = null;
        String datasource = null;
        String ifNoneMatch = null;
        Integer page = null;
        String token = null;
        List<CorporationOrdersResponse> response = api.getCorporationsCorporationIdOrders(corporationId, datasource, ifNoneMatch, page, token);
        // TODO: test validations
    }

    /**
     * List historical orders from a corporation
     *
     * List cancelled and expired market orders placed on behalf of a corporation up to 90 days in the past.  ---  This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant, Trader  SSO Scope: esi-markets.read_corporation_orders.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("Needs corporation with read access")
    public void getCorporationsCorporationIdOrdersHistoryTest() throws ApiException {
        Integer corporationId = null;
        String datasource = null;
        String ifNoneMatch = null;
        Integer page = null;
        String token = null;
        List<CorporationOrdersHistoryResponse> response = api.getCorporationsCorporationIdOrdersHistory(corporationId, datasource, ifNoneMatch, page, token);
        // TODO: test validations
    }

    /**
     * Get item groups
     *
     * Get a list of item groups  ---  This route expires daily at 11:05
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMarketsGroupsTest() throws ApiException {
        String ifNoneMatch = null;
        List<Integer> response = api.getMarketsGroups(DATASOURCE, ifNoneMatch);
        assertThat(response).isNotEmpty();
    }

    /**
     * Get item group information
     *
     * Get information on an item group  ---  This route expires daily at 11:05
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMarketsGroupsMarketGroupIdTest() throws ApiException {
        Integer marketGroupId = 2;
        String ifNoneMatch = null;
        String language = null;
        MarketGroupResponse response = api.getMarketsGroupsMarketGroupId(marketGroupId, LANGUAGE, DATASOURCE, ifNoneMatch, language);
        assertThat(response).isNotNull();
        assertThat(response.getName()).isEqualTo("Blueprints & Reactions");
    }

    /**
     * List market prices
     *
     * Return a list of prices  ---  This route is cached for up to 3600 seconds
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMarketsPricesTest() throws ApiException {
        String ifNoneMatch = null;
        List<MarketPricesResponse> response = api.getMarketsPrices(DATASOURCE, ifNoneMatch);
        assertThat(response).hasSizeGreaterThan(0);
        assertThat(response.get(0).getTypeId()).isGreaterThan(0);
    }

    /**
     * List historical market statistics in a region
     *
     * Return a list of historical market statistics for the specified type in a region  ---  This route expires daily at 11:05
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMarketsRegionIdHistoryTest() throws ApiException {
        String ifNoneMatch = null;
        List<MarketHistoryResponse> response = api.getMarketsRegionIdHistory(REGION_ID_THE_FORGE, TYPE_ID_VELDSPAR, DATASOURCE, ifNoneMatch);
        assertThat(response).isNotEmpty();
        assertThat(response.get(0).getOrderCount()).isGreaterThan(0L);
    }

    /**
     * List orders in a region
     *
     * Return a list of orders in a region  ---  This route is cached for up to 300 seconds
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMarketsRegionIdOrdersTest() throws ApiException {
        String orderType = "buy";
        String ifNoneMatch = null;
        Integer page = null;
        List<MarketOrdersResponse> response = api.getMarketsRegionIdOrders(orderType, REGION_ID_THE_FORGE, DATASOURCE, ifNoneMatch, page, TYPE_ID_VELDSPAR);
        assertThat(response).isNotEmpty();
        assertThat(response.get(0).getMinVolume()).isGreaterThan(0);
    }

    /**
     * List type IDs relevant to a market
     *
     * Return a list of type IDs that have active orders in the region, for efficient market indexing.  ---  This route is cached for up to 600 seconds
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMarketsRegionIdTypesTest() throws ApiException {
        String ifNoneMatch = null;
        Integer page = null;
        List<Integer> response = api.getMarketsRegionIdTypes(REGION_ID_THE_FORGE, DATASOURCE, ifNoneMatch, page);
        assertThat(response).isNotEmpty();
    }

    /**
     * List orders in a structure
     *
     * Return all orders in a structure  ---  This route is cached for up to 300 seconds  SSO Scope: esi-markets.structure_markets.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("No static structure to use here")
    public void getMarketsStructuresStructureIdTest() throws ApiException {
        Long structureId = null;
        String datasource = null;
        String ifNoneMatch = null;
        Integer page = null;
        String token = null;
        List<MarketStructuresResponse> response = api.getMarketsStructuresStructureId(structureId, datasource, ifNoneMatch, page, token);
        // TODO: test validations
    }

    /**
     * X-Pages example
     * @throws ApiException
     */
    @Test
    public void pagingExample() throws ApiException {
        final String orderType = "all";
        //Save all results in this List
        final List<MarketOrdersResponse> result = new ArrayList<>();

        /**
         * Step 1: Get first page.
         */
        //Get market orders
        ApiResponse<List<MarketOrdersResponse>>
                response = api.getMarketsRegionIdOrdersWithHttpInfo(orderType, REGION_ID_THE_FORGE, DATASOURCE, null, null, null);
        result.addAll(response.getData());

        /**
         * Step 2: Safely get X-Pages header.
         */
        final Integer xPages = HeaderUtil.getXPages(response.getHeaders());
        if (xPages == null || xPages < 2) { //Better safe than sorry
            return;
        }

        /**
         * Step 3: Get the rest of the pages.
         *
         * This can be done in threads
         * For public endpoints ApiClient is fully thread safe.
         * For authorized endpoints one instance of ApiClient is required per refresh token
         */
        for (int page = 2; page <= xPages; page++) { //For each page greater than one.
            //Get market orders
            List<MarketOrdersResponse> pageResponse = api.getMarketsRegionIdOrders(orderType, REGION_ID_THE_FORGE, DATASOURCE, null, page, null);
            result.addAll(pageResponse);
        }

        assertThat(result).isNotNull().isNotEmpty();
    }
}
