/*
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package net.troja.eve.esi.api;

import net.troja.eve.esi.ApiException;
import net.troja.eve.esi.model.CharacterMailinglistsResponse;
import net.troja.eve.esi.model.Mail;
import net.troja.eve.esi.model.MailHeadersResponse;
import net.troja.eve.esi.model.MailLabelSimple;
import net.troja.eve.esi.model.MailLabelsResponse;
import net.troja.eve.esi.model.MailMetaData;
import net.troja.eve.esi.model.MailResponse;
import java.util.Set;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * API tests for MailApi
 */
public class MailApiTest extends GeneralApiTest {

    private final MailApi api = new MailApi();

    @BeforeEach
    public void setUp() {
        api.setApiClient(apiClient);
    }

    /**
     * Delete a mail label
     *
     * Delete a mail label  ---   SSO Scope: esi-mail.organize_mail.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("Delete operations can't be tested")
    public void deleteCharactersCharacterIdMailLabelsLabelIdTest() throws ApiException {
        Integer labelId = null;
        String datasource = null;
        String token = null;
        api.deleteCharactersCharacterIdMailLabelsLabelId(characterId, labelId, DATASOURCE, token);
        // TODO: test validations
    }

    /**
     * Delete a mail
     *
     * Delete a mail  ---   SSO Scope: esi-mail.organize_mail.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("Delete operations can't be tested")
    public void deleteCharactersCharacterIdMailMailIdTest() throws ApiException {
        Integer characterId = null;
        Integer mailId = null;
        String datasource = null;
        String token = null;
        api.deleteCharactersCharacterIdMailMailId(characterId, mailId, datasource, token);
        // TODO: test validations
    }

    /**
     * Return mail headers
     *
     * Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards  ---  This route is cached for up to 30 seconds  SSO Scope: esi-mail.read_mail.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdMailTest() throws ApiException {
        String ifNoneMatch = null;
        Set<Integer> labels = null;
        Integer lastMailId = null;
        String token = null;
        List<MailHeadersResponse> response = api.getCharactersCharacterIdMail(characterId, DATASOURCE, ifNoneMatch, labels, lastMailId, token);
        assertThat(response).hasSize(50);
        MailHeadersResponse mail = response.get(0);
        assertThat(mail.getFrom()).isGreaterThan(0);
        assertThat(mail.getSubject()).isNotBlank();
    }

    /**
     * Get mail labels and unread counts
     *
     * Return a list of the users mail labels, unread counts for each label and a total unread count.  ---  This route is cached for up to 30 seconds  SSO Scope: esi-mail.read_mail.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCharactersCharacterIdMailLabelsTest() throws ApiException {
        String ifNoneMatch = null;
        String token = null;
        MailLabelsResponse response = api.getCharactersCharacterIdMailLabels(characterId, DATASOURCE, ifNoneMatch, token);
        assertThat(response).isNotNull();
    }

    /**
     * Return mailing list subscriptions
     *
     * Return all mailing lists that the character is subscribed to  ---  This route is cached for up to 120 seconds  SSO Scope: esi-mail.read_mail.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("We can't test this due to missing mailinglists")
    public void getCharactersCharacterIdMailListsTest() throws ApiException {
        String ifNoneMatch = null;
        String token = null;
        List<CharacterMailinglistsResponse> response = api.getCharactersCharacterIdMailLists(characterId, DATASOURCE, ifNoneMatch, token);
        assertThat(response).isNotEmpty();
    }

    /**
     * Return a mail
     *
     * Return the contents of an EVE mail  ---  This route is cached for up to 30 seconds  SSO Scope: esi-mail.read_mail.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("We don't have a mail id")
    public void getCharactersCharacterIdMailMailIdTest() throws ApiException {
        Integer characterId = null;
        Integer mailId = null;
        String datasource = null;
        String ifNoneMatch = null;
        String token = null;
        MailResponse response = api.getCharactersCharacterIdMailMailId(characterId, mailId, datasource, ifNoneMatch, token);
        // TODO: test validations
    }

    /**
     * Send a new mail
     *
     * Create and send a new mail  ---   SSO Scope: esi-mail.send_mail.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("Send operations can't be tested")
    public void postCharactersCharacterIdMailTest() throws ApiException {
        Integer characterId = null;
        Mail mail = null;
        String datasource = null;
        String token = null;
        Integer response = api.postCharactersCharacterIdMail(characterId, mail, datasource, token);
        // TODO: test validations
    }

    /**
     * Create a mail label
     *
     * Create a mail label  ---   SSO Scope: esi-mail.organize_mail.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("Create operations can't be tested")
    public void postCharactersCharacterIdMailLabelsTest() throws ApiException {
        Integer characterId = null;
        MailLabelSimple label = null;
        String datasource = null;
        String token = null;
        Integer response = api.postCharactersCharacterIdMailLabels(characterId, label, datasource, token);
        // TODO: test validations
    }

    /**
     * Update metadata about a mail
     *
     * Update metadata about a mail  ---   SSO Scope: esi-mail.organize_mail.v1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Disabled("Update can't be tested")
    public void putCharactersCharacterIdMailMailIdTest() throws ApiException {
        Integer characterId = null;
        Integer mailId = null;
        MailMetaData contents = null;
        String datasource = null;
        String token = null;
        api.putCharactersCharacterIdMailMailId(characterId, mailId, contents, datasource, token);
        // TODO: test validations
    }

}
