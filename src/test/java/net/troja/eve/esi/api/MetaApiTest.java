/*
 * ESI Meta Spec
 * ESI specs and miscellaneous routes
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package net.troja.eve.esi.api;

import net.troja.eve.esi.ApiException;
import net.troja.eve.esi.model.EsiStatusResponse;
import net.troja.eve.esi.model.EsiVerifyResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * API tests for MetaApi
 */
public class MetaApiTest extends GeneralApiTest {

    private final MetaApi api = new MetaApi();

    @BeforeEach
    public void setUp() {
        api.setApiClient(apiClient);
    }

    /**
     * Debug request headers
     *
     * Echo the request headers for debugging purposes. Note that the &#39;Connection&#39; header and any &#39;X-&#39; headers are not included
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHeadersTest() throws ApiException {
        Map<String, String> headers = api.getHeaders();
        assertThat(headers).isNotEmpty();
        assertThat(headers.get("Accept")).isEqualTo("application/json");
        assertThat(headers.get("User-Agent")).isEqualTo("eve-esi/slack:@goldengnu");
    }

    /**
     * Ping route
     *
     * Ping the ESI routers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPingTest() throws ApiException {
        String ping = api.getPing();
        assertThat(ping).isEqualTo("ok");
    }

    /**
     * ESI health status
     *
     * Provides a general health indicator per route and method
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatusTest() throws ApiException {
        String version = "latest";
        List<EsiStatusResponse> status = api.getStatus(version);
        assertThat(status).isNotEmpty();
        EsiStatusResponse esiStatus = status.get(0);
        assertThat(esiStatus.getEndpoint()).isNotBlank();
        assertThat(esiStatus.getMethod()).isNotBlank();
        assertThat(esiStatus.getRoute()).isNotBlank();
        assertThat(esiStatus.getStatus()).isNotNull();
        assertThat(esiStatus.getTags()).isNotEmpty();
    }

    /**
     * Verify access token
     *
     * Verify authorization tokens in ESI&#39;s auth cache
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVerifyTest() throws ApiException {
        String userAgent = null;
        String xUserAgent = null;
        String token = null;
        String authorization = null;
        EsiVerifyResponse verify = api.getVerify(userAgent, xUserAgent, DATASOURCE, token, authorization);
        assertThat(verify).isNotNull();
        assertThat(verify.getCharacterID()).isNotNull();
        assertThat(verify.getCharacterID()).isEqualTo(characterId);
        assertThat(verify.getCharacterName()).isNotNull();
        assertThat(verify.getCharacterName()).isEqualTo(characterName);
        assertThat(verify.getCharacterOwnerHash()).isNotNull();
        assertThat(verify.getExpiresOn()).isNotNull();
        assertThat(verify.getScopes()).isNotEmpty();
        assertThat(verify.getScopes().split(" ").length).isGreaterThan(0);
        assertThat(verify.getTokenType()).isNotNull();
    }

    /**
     * List versions
     *
     * List all endpoint versions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVersionsTest() throws ApiException {
        String userAgent = null;
        String xUserAgent = null;
        List<String> versions = api.getVersions(userAgent, xUserAgent);
        assertThat(versions).isNotEmpty();
    }

}
